{"version":3,"sources":["components/NavMenu.js","components/Layout.js","utils/SoundPlayer.js","utils/Utils.js","algorithms/SortResult.js","renderers/VerticalBarsRenderer.js","renderers/ColorsRenderer.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSortRecursive.js","algorithms/MergeSortIterative.js","algorithms/CocktailSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","algorithms/ShellSort.js","scenes/Home.js","scenes/About.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","NavItem","tag","Link","isActive","_","location","includes","pathname","activeClassName","className","to","style","display","exact","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","renderItems","Component","displayName","name","Layout","children","SoundPlayer","sound","audioContext","gainNode","oscillator","deleteSoundService","window","AudioContext","webkitAudioContext","createGain","gain","value","connect","destination","createOscillator","type","frequency","start","currentTime","stop","disconnect","close","val","max","Utils","a","b","Math","floor","random","SortResult","sortedArray","animations","anim","push","nrWaitAnims","i","SortWaitAnimation","i_idx","j_idx","SortCompareAnimation","SortSwapAnimation","subArrToReplace","SortReplaceAnimation","animation","j","subArrayToReplace","VerticalBarsRenderer","loopFunction","currentStep","animState","length","onAnimationFinished","paintArray","delay","playing","isCompareAnimation","isWaitAnimation","toUncolor","paintArrayIndex","pop","onWait","onCompare","isSwapAnimation","temp","array","update","onSwap","isReplaceAnimation","k","onReplace","onNextStep","loop","bars","color","backgroundColor","index","setInterval","resume","clearInterval","newArray","size","arr","randomNumber","map","number","key","ref","x","height","marginTop","ColorsRenderer","forceUpdate","hue","COLOR_BAR_HEIGHT","BubbleSort","arrayToSort","modifyTheOriginal","result","sorted","addCompareAnimation","addSwapAnimation","addReplaceAnimation","InsertionSort","current","SelectionSort","minIdx","MergeSortRecursive","mergeSortRec","l","r","m","merge","left","middle","right","start1","start2","idx","slice","MergeSortIterative","mergeSortIter","n","min","CocktailSort","QuickSort","quickSort","pivotIndex","partition","pivot","HeapSort","heapSort","dim","filter","pos","largest","ShellSort","gap","elem","ALLOWED_DELAYS","Home","onAlgorithmChange","event","newId","parseInt","target","algorithmId","onRendererChange","renderer","stopSortAnimation","returnRenderer","rendererId","onSpeedChange","isPlaying","v","pause","onArraySizeChange","arraySize","onSoundCheckChanged","soundEnabled","clearOscillatorFrequency","updateSound","setOscillatorFrequency","onNewArrayClick","sortResult","sort","console","log","getSortResult","initSoundService","next","newRandomArray","getCurrentStep","pauseSortAnimation","resumeSortAnimation","startSortAnimation","htmlFor","id","onChange","disabled","renderControls","checked","renderView","onPlayClick","playNext","indexOf","About","href","App","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0059858b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem } from 'reactstrap';\r\n\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n\r\n    renderItems() {\r\n        return (<>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    isActive={(/*match*/_, location) => [\"/\", \"/index\", \"/index.html\"].includes(location.pathname)} \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/\">\r\n                        <p style={{display: \"inline\"}}>Home</p>\r\n                </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    exact \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/about\">\r\n                        <p style={{display: \"inline\"}}>About</p>\r\n            </NavLink>\r\n            </NavItem>\r\n        </>);\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-black border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Sorting Visualizer</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                {this.renderItems()}\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const MIN_FREQ = 180;\r\nconst MAX_FREQ = 750;\r\n\r\nexport class SoundPlayer {\r\n    constructor(){ \r\n        this.sound = {  \r\n            audioContext : null,\r\n            gainNode : null,\r\n            oscillator : null\r\n        };  \r\n    }\r\n\r\n    initSoundService(){   \r\n        this.deleteSoundService();\r\n\r\n        this.sound.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.sound.gainNode = this.sound.audioContext.createGain()\r\n        this.sound.gainNode.gain.value = 0.15 \r\n        this.sound.gainNode.connect(this.sound.audioContext.destination)\r\n\r\n        this.sound.oscillator = this.sound.audioContext.createOscillator();\r\n        this.sound.oscillator.type = 'sine'; // sine, square, sawtooth, triangle\r\n        this.sound.oscillator.frequency.value = 0; \r\n        this.sound.oscillator.connect(this.sound.gainNode);\r\n        \r\n        this.sound.oscillator.start(this.sound.audioContext.currentTime); \r\n    } \r\n    deleteSoundService(){ \r\n        if(this.sound.oscillator === null)\r\n            return;\r\n        \r\n        this.sound.oscillator.stop(this.sound.audioContext.currentTime); \r\n        this.sound.oscillator = null;\r\n\r\n        this.sound.gainNode.disconnect();\r\n        this.sound.gainNode = null;\r\n        \r\n        this.sound.audioContext.close();\r\n        this.sound.audioContext = null;\r\n    }\r\n\r\n    setOscillatorFrequency(val, max){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = \r\n                val / max * (MAX_FREQ - MIN_FREQ) + MIN_FREQ;\r\n    }\r\n    clearOscillatorFrequency(){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = 0;\r\n    }\r\n}","export class Utils {\r\n    static randomNumber(a, b){\r\n        return Math.floor(Math.random() * (b - a) + a);\r\n    }\r\n}","\r\nexport class SortResult {\r\n    constructor() { \r\n        this.sortedArray = []; \r\n        this.animations = []; \r\n    }\r\n\r\n    addAnimationObject(anim) {\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    addEmptyAnimation(nrWaitAnims) {\r\n        for (let i = 0; i < nrWaitAnims; i++) { \r\n            let anim = new SortWaitAnimation();\r\n            this.animations.push(anim);\r\n        }\r\n    }\r\n    addCompareAnimation(i_idx, j_idx) {\r\n        let anim = new SortCompareAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addSwapAnimation(i_idx, j_idx) {\r\n        let anim = new SortSwapAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addReplaceAnimation(i_idx, j_idx, subArrToReplace) {\r\n        let anim = new SortReplaceAnimation(i_idx, j_idx, subArrToReplace);\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    static isWaitAnimation(animation) { return (animation instanceof SortWaitAnimation); }\r\n    static isCompareAnimation(animation) { return (animation instanceof SortCompareAnimation); }\r\n    static isSwapAnimation(animation) { return ( animation instanceof SortSwapAnimation ); }\r\n    static isReplaceAnimation(animation) { return (animation instanceof SortReplaceAnimation); }\r\n \r\n}\r\n\r\n// Animations\r\nexport class SortCompareAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n}\r\nexport class SortSwapAnimation {\r\n    constructor(i_idx, j_idx/*,newSortedElem*/) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n\r\n        //this.newSortedElements = newSortedElem;\r\n    }\r\n} \r\nexport class SortReplaceAnimation {\r\n    constructor(i_idx, j_idx, subArrToReplace) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n         \r\n        this.subArrayToReplace = subArrToReplace;\r\n    }\r\n}\r\nexport class SortWaitAnimation { } \r\n","import React, { Component } from 'react';\r\nimport { Utils } from '../utils/Utils'\r\nimport { SortResult } from '../algorithms/SortResult.js'; \r\n\r\nimport './VerticalBarsRenderer.css'\r\n\r\nexport const MAX_ARRAY_ELEMENT = 359;\r\n\r\nexport const INITIAL_COLOR = \"darkgray\";\r\nexport const SORTED_COLOR = \"green\";\r\nexport const COMPARE_COLOR = \"red\";\r\nexport const SWAP_COLOR = \"red\";\r\nexport const REPLACE_COLOR = \"violet\";\r\n \r\nexport class VerticalBarsRenderer extends Component{ \r\n    static displayName = VerticalBarsRenderer.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: this.props != null && this.props.array != null \r\n                ? this.props.array \r\n                : [], \r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps (this.loopFunction)\r\n \r\n            playing: false, // To skip animations\r\n            delay: 1, // To skip animations\r\n            \r\n            animations: null, // Animations from SortResult\r\n            currentStep: 0, // To be able to go to the next step \r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n            \r\n        this.bars = []; // Refereces to vertical bars\r\n    }   \r\n\r\n    // Specific methods\r\n    paintArray(color) {   \r\n        for (let i = 0; i < this.state.array.length; i++) \r\n            this.bars[i].style.backgroundColor = color; \r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0)  \r\n            this.bars[index].style.backgroundColor = color; \r\n    }\r\n    loopFunction = () => {\r\n        let currentStep = this.animState.currentStep;\r\n        let animations = this.animState.animations;\r\n \r\n        // End the loop\r\n        if (currentStep >= animations.length) {\r\n            // Event\r\n            if(this.props != null && this.props.onAnimationFinished != null)\r\n                this.props.onAnimationFinished();\r\n            \r\n            this.stop(); \r\n            this.paintArray(SORTED_COLOR); \r\n            \r\n            return;\r\n        } \r\n        \r\n        // Skip useless animations at high speed\r\n        while( this.animState.delay === 1 && \r\n            this.animState.playing === true && \r\n            (SortResult.isCompareAnimation(animations[this.animState.currentStep]) ||\r\n            SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) \r\n        ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        } \r\n        // Skip useless animations while stepping\r\n        while( this.animState.playing === false && SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        }\r\n        \r\n        // Uncolor the last colored elements\r\n        while (this.animState.toUncolor.length > 0) {\r\n            this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n        }\r\n        \r\n        // Play the animation\r\n        if (SortResult.isWaitAnimation(animations[currentStep])) { \r\n            // Event\r\n            if(this.props != null && this.props.onWait != null)\r\n                this.props.onWait();\r\n\r\n        } else if (SortResult.isCompareAnimation(animations[currentStep])) {   \r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onCompare != null)\r\n                this.props.onCompare();\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isSwapAnimation(animations[currentStep])) { \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n            \r\n            this.paintArrayIndex(SWAP_COLOR, a);\r\n            this.paintArrayIndex(SWAP_COLOR, b);\r\n             \r\n            let temp = this.state.array[a];\r\n            // eslint-disable-next-line\r\n            this.state.array[a] = this.state.array[b];\r\n            // eslint-disable-next-line\r\n            this.state.array[b] = temp;\r\n\r\n            this.setState({update: true}); // because i'm not using setState above\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onSwap != null)\r\n                this.props.onSwap(this.state.array[a],this.state.array[b]);\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isReplaceAnimation(animations[currentStep])) { \r\n            for (let k = animations[currentStep].i; k <= animations[currentStep].j; k++) {\r\n                this.paintArrayIndex(REPLACE_COLOR, k);\r\n                \r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(k); \r\n\r\n                // eslint-disable-next-line\r\n                this.state.array[k] = animations[currentStep].subArrayToReplace[k - animations[currentStep].i];\r\n            }\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n             \r\n            // Event\r\n            if(this.props != null && this.props.onReplace != null)\r\n                this.props.onReplace(this.state.array[animations[currentStep].i],this.state.array[animations[currentStep].j]);\r\n  \r\n            this.setState({update: true}); // because i'm not using setState above\r\n\r\n        }\r\n        \r\n        // Event\r\n        if(this.props != null && this.props.onNextStep != null)\r\n            this.props.onNextStep();\r\n  \r\n        // Update the current step\r\n        this.animState.currentStep++;\r\n    }\r\n\r\n    // Mandatory methods 1\r\n    isPlaying(){ \r\n        return this.animState.playing; \r\n    }\r\n    start(animations, delay){ \r\n        if(this.state.array.length === 0)\r\n            return;\r\n\r\n        if (this.animState.currentStep !== 0){\r\n            this.resume(delay);\r\n            return;\r\n        }  \r\n\r\n        this.stop(); \r\n  \r\n        // Init\r\n        this.animState.playing = true;\r\n        this.animState.delay = delay;\r\n        this.animState.animations = animations; \r\n        this.animState.currentStep = 0;  \r\n        this.animState.toUncolor = [];\r\n        this.paintArray(INITIAL_COLOR);\r\n \r\n        // Start the loop \r\n        this.animState.loop = setInterval(this.loopFunction, delay);\r\n\r\n    }\r\n    resume(delay){ \r\n        if(this.state.array.length === 0) \r\n            return; \r\n\r\n        this.animState.playing = true; \r\n        this.animState.delay = delay;\r\n        this.animState.loop = setInterval(this.loopFunction, delay); \r\n    }\r\n    pause(){ \r\n        clearInterval(this.animState.loop); \r\n        this.animState.playing = false;\r\n    }\r\n    stop(){ \r\n        this.animState.playing = false;\r\n\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0; \r\n        this.paintArray(INITIAL_COLOR); \r\n    }\r\n    // Mandatory methods 2\r\n    next() { \r\n        this.loopFunction(); \r\n    }\r\n    getCurrentStep(){ \r\n        return this.animState.currentStep; \r\n    }\r\n    setArray(newArray){\r\n        this.stop();\r\n        this.setState({array: newArray});\r\n    }\r\n    newRandomArray(size){ \r\n        let arr = [];\r\n        for (let i = 0; i < size; i++) {\r\n            arr.push(Utils.randomNumber(1, MAX_ARRAY_ELEMENT));\r\n        }\r\n        this.setState({ array: arr }); \r\n\r\n        return arr;\r\n    }\r\n \r\n    // Render method\r\n    render() {   \r\n        return (  \r\n            <div className=\"vbars-render-zone\">\r\n                {\r\n                    this.state.array.map((number, index) => \r\n                        <div key={index} ref={x=>this.bars[index] = x} style={{\r\n                            height: number,\r\n                            marginTop: Math.max(...this.state.array) - number\r\n                        }} className=\"vertical-bar\"></div>\r\n                    )\r\n                }\r\n            </div> \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Utils } from '../utils/Utils'\r\nimport { SortResult } from '../algorithms/SortResult.js'; \r\n\r\nimport './ColorsRenderer.css'\r\n\r\nexport const INITIAL_COLOR = \"darkgray\"; \r\nexport const COMPARE_COLOR = \"red\";\r\nexport const SWAP_COLOR = \"red\";\r\nexport const REPLACE_COLOR = \"violet\";\r\n\r\nexport const COLOR_BAR_HEIGHT = 359;\r\n\r\n// HSL\r\nexport const SATURATION = 82;\r\nexport const LIGHTNESS =  56;\r\n\r\nexport class ColorsRenderer extends Component{ \r\n    static displayName = ColorsRenderer.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: this.props != null && this.props.array != null \r\n                ? this.props.array \r\n                : [], \r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps (this.loopFunction)\r\n\r\n            playing: false, // To skip animations \r\n            delay: 1, // To skip animations\r\n            \r\n            animations: null, // Animations from SortResult\r\n            currentStep: 0, // To be able to go to the next step  \r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n            \r\n        this.bars = []; // Refereces to vertical bars\r\n    }   \r\n    \r\n    // Specific methods \r\n    paintArray(color) {   \r\n        for (let i = 0; i < this.state.array.length; i++) \r\n            this.bars[i].children[0].style.backgroundColor = color; \r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0)  \r\n            this.bars[index].children[0].style.backgroundColor = color; \r\n    }\r\n    loopFunction = () => {\r\n        let currentStep = this.animState.currentStep;\r\n        let animations = this.animState.animations;\r\n  \r\n        // End the loop\r\n        if (currentStep >= animations.length) {\r\n            // Event\r\n            if(this.props != null && this.props.onAnimationFinished != null)\r\n                this.props.onAnimationFinished();\r\n            \r\n            this.stop();   \r\n            this.paintArray(INITIAL_COLOR); \r\n            return;\r\n        }  \r\n\r\n        // Skip useless animations at high speed\r\n        while( this.animState.delay === 1 && \r\n            this.animState.playing === true && \r\n            (SortResult.isCompareAnimation(animations[this.animState.currentStep]) ||\r\n            SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) \r\n        ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        } \r\n        // Skip useless animations while stepping\r\n        while( this.animState.playing === false && SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        }\r\n \r\n        // Uncolor the last colored elements\r\n        while (this.animState.toUncolor.length > 0) {\r\n            this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n        }\r\n \r\n        // Play the animation\r\n        if (SortResult.isWaitAnimation(animations[currentStep])) { \r\n            // Event\r\n            if(this.props != null && this.props.onWait != null)\r\n                this.props.onWait(); \r\n\r\n        } else if (SortResult.isCompareAnimation(animations[currentStep])) {   \r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onCompare != null)\r\n                this.props.onCompare();\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isSwapAnimation(animations[currentStep])) {  \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n            \r\n            this.paintArrayIndex(SWAP_COLOR, a);\r\n            this.paintArrayIndex(SWAP_COLOR, b);\r\n\r\n            let temp = this.state.array[a];\r\n            // eslint-disable-next-line\r\n            this.state.array[a] = this.state.array[b];\r\n            // eslint-disable-next-line\r\n            this.state.array[b] = temp;\r\n\r\n            this.forceUpdate(); // because i'm not using setState above\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onSwap != null)\r\n                this.props.onSwap(this.state.array[a],this.state.array[b]);\r\n  \r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(a, b);\r\n\r\n        } else if (SortResult.isReplaceAnimation(animations[currentStep])) {  \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n\r\n            for (let k = a; k <= b; k++) { \r\n                this.paintArrayIndex(REPLACE_COLOR, k);\r\n                \r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(k); \r\n\r\n                // eslint-disable-next-line\r\n                this.state.array[k] = animations[currentStep].subArrayToReplace[k - a];\r\n            } \r\n\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n             \r\n            // Event\r\n            if(this.props != null && this.props.onReplace != null)\r\n                this.props.onReplace(this.state.array[a],this.state.array[b]);\r\n  \r\n            this.forceUpdate(); // because i'm not using setState above \r\n\r\n        }\r\n        \r\n        // Event\r\n        if(this.props != null && this.props.onNextStep != null)\r\n            this.props.onNextStep();\r\n  \r\n        // Update the current step\r\n        this.animState.currentStep++;\r\n    }\r\n\r\n    // Mandatory methods 1\r\n    isPlaying(){ \r\n        return this.animState.playing; \r\n    }\r\n    start(animations, delay){ \r\n        if(this.state.array.length === 0)\r\n            return;\r\n\r\n        if (this.animState.currentStep !== 0){\r\n            this.resume(delay);\r\n            return;\r\n        }  \r\n\r\n        this.stop(); \r\n  \r\n        // Init\r\n        this.animState.playing = true; \r\n        this.animState.delay = delay;\r\n        this.animState.animations = animations; \r\n        this.animState.currentStep = 0;    \r\n \r\n        // Start the loop \r\n        this.animState.loop = setInterval(this.loopFunction, delay);\r\n\r\n    }\r\n    resume(delay){ \r\n        if(this.state.array.length === 0) \r\n            return; \r\n\r\n        this.animState.playing = true;  \r\n        this.animState.delay = delay;\r\n        this.animState.loop = setInterval(this.loopFunction, delay); \r\n    }\r\n    pause(){ \r\n        clearInterval(this.animState.loop); \r\n        this.animState.playing = false;\r\n    }\r\n    stop(){ \r\n        this.animState.playing = false;\r\n\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0;  \r\n    }\r\n\r\n    // Mandatory methods 2\r\n    next() { \r\n        this.loopFunction(); \r\n    }\r\n    getCurrentStep(){ \r\n        return this.animState.currentStep; \r\n    }\r\n    setArray(newArray){\r\n        this.stop();\r\n        this.setState({array: newArray});\r\n    }\r\n    newRandomArray(size){ \r\n        let arr = [];\r\n        for (let i = 0; i < size; i++) {\r\n            arr.push(Utils.randomNumber(0, 359)); // Possible HUE values (HSL)\r\n        }\r\n        this.setState({ array: arr }); \r\n\r\n        return arr;\r\n    }\r\n \r\n    // Render method\r\n    render() {   \r\n        return (  \r\n            <div className=\"colors-render-zone\">\r\n                {\r\n                    this.state.array.map((hue, index) => \r\n                        <div key={index} \r\n                            ref={x=>this.bars[index] = x} \r\n                            className=\"color-bar\"\r\n                            style={{\r\n                                height: COLOR_BAR_HEIGHT + \"px\",\r\n                                backgroundColor: \"hsl(\" + hue + \", \" + SATURATION + \"%, \" + LIGHTNESS + \"%)\"\r\n                            }}\r\n                        >\r\n                            <div className=\"color-bar-indicator\"\r\n                                style={{\r\n                                    marginTop: (COLOR_BAR_HEIGHT - 10) + \"px\",\r\n                                    height: '10px',\r\n                                    backgroundColor: 'darkgrey'\r\n                                }}\r\n                            ></div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div> \r\n        );\r\n    }\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class BubbleSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let sorted = false; \r\n        for (let k = 0; k < array.length && !sorted; k++) {\r\n            sorted = true;\r\n\r\n            for (let i = 0; i < array.length - k - 1; i++) {\r\n                // Register the check into the animations\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i+1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n\r\n                    // Register the swap into the animations\r\n                    result.addSwapAnimation(i, i + 1); \r\n                }\r\n            }\r\n        } \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class InsertionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 1; i < array.length; i++) { \r\n            let current = array[i]; \r\n            // Register the check into the animations\r\n            result.addCompareAnimation(i, i);\r\n\r\n            let j = i - 1;\r\n            while (j >= 0 && current < array[j]) { \r\n                array[j + 1] = array[j]; \r\n                 \r\n                // Register the move into the animations  \r\n                result.addSwapAnimation(j, j + 1);\r\n\r\n                j--;\r\n            }\r\n            array[j + 1] = current;\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class SelectionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n\r\n            let minIdx = i;\r\n            for (let j = i + 1; j < array.length; j++) { \r\n                // Add check\r\n                result.addCompareAnimation(minIdx, j);\r\n\r\n                if (array[j] < array[minIdx]) {\r\n                    minIdx = j;\r\n                }\r\n            }\r\n                \r\n            let temp = array[minIdx];\r\n            array[minIdx] = array[i];\r\n            array[i] = temp;\r\n\r\n            // Add movement \r\n            result.addSwapAnimation(minIdx, i);\r\n        } \r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortRecursive {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n         \r\n        MergeSortRecursive.mergeSortRec(array, 0, array.length-1, result);\r\n         \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static mergeSortRec(array, l, r, result) {\r\n        if (l < r) {\r\n            let m = ~~((r - l) / 2 + l);\r\n            MergeSortRecursive.mergeSortRec(array, l, m, result);\r\n            MergeSortRecursive.mergeSortRec(array, m + 1, r, result);\r\n\r\n            MergeSortRecursive.merge(array, l, m, r, result); \r\n            //this.addAnimationsOld(array, result, l, m, r);\r\n        }\r\n    } \r\n    static merge(array, left, middle, right, result) { // In-place merge function\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n         \r\n        if (array[middle] <= array[start2]) \r\n            return; \r\n         \r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n                 \r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n                     \r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n                 \r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n     \r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortIterative {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        MergeSortIterative.mergeSortIter(array, result); \r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static mergeSortIter(array, result) {\r\n        let n = array.length;\r\n        for (let size = 1; size < n; size = 2 * size) {\r\n            for (let left = 0; left < n - 1; left = left + 2 * size) {\r\n                let middle = Math.min(left + size - 1, n - 1);\r\n                let right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                MergeSortIterative.merge(array, left, middle, right, result); \r\n            }\r\n\r\n        }\r\n    }\r\n    static merge(array, left, middle, right, result) {\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n\r\n        if (array[middle] <= array[start2])\r\n            return;\r\n\r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n\r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n\r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n\r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class CocktailSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let left = 0, right = array.length - 1; \r\n\r\n        let sorted = false;\r\n        while (!sorted) {\r\n            sorted = true;\r\n\r\n            for (let i = left; i < right; i++) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i + 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n                     \r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i + 1);\r\n                }\r\n            }\r\n            if (sorted) break;\r\n            right--;\r\n            sorted = true;\r\n\r\n            for (let i = right; i > left; i--) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i - 1);\r\n\r\n                if (array[i] < array[i - 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i - 1];\r\n                    array[i - 1] = temp;\r\n\r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i - 1);\r\n                }\r\n            }\r\n            left++;\r\n        }\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n}","import {SortResult} from './SortResult.js'\r\n\r\nexport class QuickSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        QuickSort.quickSort(array, 0, array.length - 1, result);\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static quickSort(arr, left, right, result) {\r\n        if (left < right) {\r\n            let pivotIndex = QuickSort.partition(arr, left, right, result);\r\n             \r\n            QuickSort.quickSort(arr, left, pivotIndex - 1, result); \r\n            QuickSort.quickSort(arr, pivotIndex, right, result); \r\n        }\r\n    }\r\n    static partition(arr, left, right, result) {\r\n        let pivot = arr[~~((left + right) / 2)];\r\n\r\n        while (left <= right) { \r\n\r\n            while (arr[left] < pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                left++;\r\n            }\r\n\r\n            while (arr[right] > pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                right--;\r\n            }\r\n\r\n            if (left <= right) {\r\n                // Swap\r\n                [arr[left], arr[right]] = [arr[right], arr[left]];\r\n\r\n                // Animation \r\n                result.addSwapAnimation(left, right);\r\n\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n} \r\n// 6 7 9 8 9 ","import {SortResult} from './SortResult.js'\r\n\r\nexport class HeapSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        HeapSort.heapSort(array, result);\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static heapSort(arr, result)  {  \r\n        let dim = arr.length;\r\n\r\n        // Filter the array to make a heap\r\n        for (let i = ~~(dim / 2 - 1); i >= 0; i--) \r\n            HeapSort.filter(arr, dim, i, result); \r\n      \r\n        // Extract the elements from the heap \r\n        for (let i=dim-1; i>0; i--) {  \r\n            [arr[0], arr[i]] = [arr[i], arr[0]]; // Extract the max element to the end \r\n             \r\n            result.addSwapAnimation(0, i);\r\n\r\n            HeapSort.filter(arr, i, 0, result); // Filter from the new root\r\n        } \r\n    } \r\n    static filter(arr, size, pos, result) \r\n    { \r\n        let dim = size;\r\n        \r\n        let largest = pos; \r\n        let right = 2*pos + 2; \r\n        let left = 2*pos + 1;\r\n        \r\n        result.addCompareAnimation(right, largest); \r\n        if (right < dim && arr[right] > arr[largest]) \r\n            largest = right; \r\n      \r\n        result.addCompareAnimation(left, largest); \r\n        if (left < dim && arr[left] > arr[largest]) \r\n            largest = left; \r\n       \r\n        // Change and refilter\r\n        if (largest !== pos)  { \r\n            [arr[pos], arr[largest]] = [arr[largest], arr[pos]];\r\n \r\n            result.addSwapAnimation(pos, largest);\r\n\r\n            HeapSort.filter(arr, size, largest, result); \r\n        } \r\n    } \r\n} \r\n// 1 0 3 6 3 7 9","import { SortResult } from './SortResult.js';\r\n\r\nexport class ShellSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n                result.addCompareAnimation(i, i);\r\n \r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > array[j+gap]){\r\n                    [array[j+gap] ,array[j]] = [array[j], array[j+gap]];\r\n                    result.addCompareAnimation(j, j+gap);\r\n                    result.addSwapAnimation(j, j+gap);\r\n                    \r\n                    j -= gap;\r\n                } \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n    static sort_d(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n\r\n                let elem = array[i];\r\n\r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > elem){\r\n                    array[j+gap] = array[j]; \r\n                    j -= gap;\r\n                }\r\n                array[j+gap] = elem; \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import React, { Component } from 'react'; \r\nimport { SoundPlayer } from '../utils/SoundPlayer';\r\nimport { VerticalBarsRenderer } from '../renderers/VerticalBarsRenderer';\r\nimport { ColorsRenderer } from '../renderers/ColorsRenderer';\r\n\r\nimport './Home.css';\r\n \r\n//import { SortResult } from '../algorithms/SortResult.js'; \r\nimport { BubbleSort } from '../algorithms/BubbleSort.js';\r\nimport { InsertionSort } from '../algorithms/InsertionSort.js';\r\nimport { SelectionSort } from '../algorithms/SelectionSort.js';\r\nimport { MergeSortRecursive } from '../algorithms/MergeSortRecursive.js';\r\nimport { MergeSortIterative } from '../algorithms/MergeSortIterative.js';\r\nimport { CocktailSort } from '../algorithms/CocktailSort.js';\r\nimport { QuickSort } from '../algorithms/QuickSort.js';\r\nimport { HeapSort } from '../algorithms/HeapSort';\r\nimport { ShellSort } from '../algorithms/ShellSort';\r\n  \r\nconst ALLOWED_DELAYS = [1000, 300, 100, 40, 15, 1];\r\n \r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: [], // The current array  \r\n \r\n            algorithmId: 7, // Used by the algo combo-box\r\n            rendererId: 1, // Used by the renderer combo-box\r\n            arraySize : 100, // Used by the array size slider 10-500\r\n\r\n            playing: false, // Used by the Play/Pause/Stop buttons\r\n            delay: 1, // Used by the speed slider = [1,100]\r\n            soundEnabled: true // Used by the checkbox \r\n        };\r\n \r\n        this.renderer = new VerticalBarsRenderer();\r\n        this.sound = new SoundPlayer();\r\n    } \r\n    componentDidMount() { this.onNewArrayClick(); }   \r\n    componentWillUnmount() { this.stopSortAnimation(); }  \r\n    \r\n    getSortResult(modifyTheOriginal = false) { // returns a SortResult object based on selected algorithm\r\n        let sortResult;\r\n        switch (this.state.algorithmId) {\r\n            case 1:\r\n                sortResult = BubbleSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 2:\r\n                sortResult = InsertionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 3:\r\n                sortResult = SelectionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 4:\r\n                sortResult = MergeSortRecursive.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 5:\r\n                sortResult = MergeSortIterative.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 6:\r\n                sortResult = QuickSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 7:\r\n                sortResult = HeapSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 8:\r\n                sortResult = ShellSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 9:\r\n                sortResult = CocktailSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(sortResult); \r\n\r\n        return sortResult;\r\n    } \r\n\r\n    // Methods for controling the renderer and the sound player\r\n    startSortAnimation() { \r\n        // Get the animations \r\n        let sortResult = this.getSortResult();  \r\n        if (typeof sortResult === 'undefined') {  \r\n            return; \r\n        } \r\n        if (sortResult.animations.length === 0) { \r\n            this.getSortResult(true);  \r\n            return;\r\n        }\r\n\r\n        this.renderer.start(sortResult.animations, this.state.delay);\r\n        this.setState({playing: true});\r\n\r\n        // Start the sound oscillator  \r\n        this.sound.initSoundService();  \r\n    }\r\n    resumeSortAnimation() {\r\n        this.renderer.resume(this.state.delay);\r\n        this.setState({playing: true});\r\n\r\n        // Start the sound oscillator  \r\n        this.sound.initSoundService(); \r\n    }\r\n    pauseSortAnimation() { \r\n        this.renderer.pause();\r\n        this.setState({playing: false});\r\n\r\n        // Stop the sound oscillator\r\n        this.sound.deleteSoundService();  \r\n    }\r\n    stopSortAnimation() {\r\n        this.renderer.stop();\r\n        this.setState({playing: false});\r\n\r\n        // Stop the sound oscillator\r\n        this.sound.deleteSoundService();  \r\n    } \r\n    playNext() { \r\n        this.renderer.next(); \r\n    }\r\n\r\n    // Control handlers\r\n    onAlgorithmChange = (event) => {\r\n        let newId = parseInt(event.target.value);\r\n        this.setState({ algorithmId: newId });\r\n    }\r\n    onRendererChange = (event) => {\r\n        if(this.renderer != null)\r\n            this.stopSortAnimation();\r\n\r\n        let newId = parseInt(event.target.value);\r\n        this.renderer = this.returnRenderer(newId);\r\n\r\n        this.setState({ rendererId: newId });\r\n    }\r\n    onSpeedChange = (event) => {\r\n        let resume = this.renderer.isPlaying();\r\n        let v = parseInt(event.target.value);\r\n\r\n        // Pause renderer\r\n        this.renderer.pause(); \r\n        this.setState({playing: false});\r\n         \r\n        this.setState({ delay: ALLOWED_DELAYS[v - 1] }, () => {\r\n            if(resume === true){\r\n                this.renderer.resume(this.state.delay);\r\n                this.setState({playing: true});\r\n            }\r\n        });\r\n    }\r\n    onArraySizeChange = (event) => { \r\n        let v = parseInt(event.target.value);  \r\n        this.setState({ arraySize: v });\r\n    } \r\n    onSoundCheckChanged = (event) => { \r\n        this.setState({ soundEnabled: !this.state.soundEnabled },()=>{\r\n            if(this.state.soundEnabled === false){\r\n                this.sound.clearOscillatorFrequency(); \r\n            }\r\n        });\r\n    }\r\n    updateSound = (a, b) => { \r\n        if(this.state.soundEnabled) \r\n            this.sound.setOscillatorFrequency((a+b)/2, Math.max(...this.state.array));\r\n        else \r\n            this.sound.clearOscillatorFrequency(); \r\n    }\r\n    \r\n    // Button handlers\r\n    onNewArrayClick() {  \r\n        if(this.renderer == null)\r\n            return;\r\n\r\n        let arr = this.renderer.newRandomArray(this.state.arraySize);\r\n        this.setState({array: arr});\r\n    }\r\n    onPlayClick(){ \r\n        if(!this.renderer.isPlaying() && this.renderer.getCurrentStep() === 0)\r\n            this.startSortAnimation();\r\n        else if(!this.renderer.isPlaying())\r\n            this.resumeSortAnimation();\r\n        else \r\n            this.pauseSortAnimation();\r\n    }\r\n\r\n    // Render method\r\n    render() {  \r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"selectAlgoDropDown\"><h6>Algorithm</h6></label>\r\n                            <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                                onChange={this.onAlgorithmChange} value={this.state.algorithmId}>\r\n                                <option value={1}>Bubble sort</option>\r\n                                <option value={2}>Insertion sort</option>\r\n                                <option value={3}>Selection sort</option>\r\n                                <option value={4}>Merge sort (recursive)</option>\r\n                                <option value={5}>Merge sort (iterative)</option>\r\n                                <option value={6}>Quick sort</option>\r\n                                <option value={7}>Heap sort</option>\r\n                                <option value={8}>Shell sort</option>\r\n                                <option value={-1} disabled></option>\r\n                                <option value={9}>Cocktail sort</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-header\">\r\n                        <button className=\"btn btn-primary btn-sm\"\r\n                            onClick={() => {\r\n                                if(this.renderer != null)\r\n                                    this.stopSortAnimation();\r\n                                this.onNewArrayClick();\r\n                            }}>New array</button>\r\n                            \r\n                        <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                            onChange={this.onRendererChange} value={this.state.rendererId}>\r\n                            <option value={1}>Vertical bars</option>\r\n                            <option value={2}>Colors</option> \r\n                        </select>\r\n\r\n                        <div className=\"range-input form-inline div-right\">\r\n                            <label htmlFor=\"sizeRangeSlider\">Array's size: {this.state.arraySize}</label>\r\n                            <input type=\"range\" className=\"slider\" id=\"sizeRangeSlider\"\r\n                                min=\"10\" max=\"500\" value={this.state.arraySize} \r\n                                onChange={this.onArraySizeChange} />\r\n                        </div> \r\n                    </div>\r\n                    \r\n                    { this.renderer != null ? this.renderControls() : null }\r\n\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h6>View</h6>\r\n \r\n                        <div className=\"form-check div-right\">\r\n                            <input type=\"checkbox\" className=\"form-check-input\" id=\"soundCheck\"\r\n                                checked={this.state.soundEnabled}\r\n                                onChange={this.onSoundCheckChanged}/>\r\n                            <label className=\"form-check-label\" htmlFor=\"soundCheck\">Sound</label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-body render-zone\"> \r\n                        {this.renderView()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    renderControls(){\r\n        return (\r\n            <div className=\"card-body\"> \r\n                <button\r\n                    onClick={() => this.onPlayClick()}\r\n                    className={\"btn btn-sm \" + (!this.state.playing && this.renderer.getCurrentStep() === 0\r\n                        ? \"btn-success\"\r\n                        : \"btn-warning\")}>\r\n\r\n                    {!this.state.playing && this.renderer.getCurrentStep() === 0\r\n                        ? \" > Play\"\r\n                        : (!this.state.playing ? \" > Resume\" : \" | | Pause\")}\r\n                </button>\r\n                <button onClick={() => this.stopSortAnimation()} className=\"btn btn-danger btn-sm\">Stop</button>\r\n\r\n                <button onClick={!this.state.playing && this.renderer.getCurrentStep() !== 0 ? () => this.playNext() : () => null}\r\n                    disabled={this.state.playing || this.renderer.getCurrentStep() === 0}\r\n                    className=\"btn btn-sm btn-warning\">\r\n                    {\" > Next\"}\r\n                </button>\r\n\r\n                <div className=\"range-input form-inline div-right\">\r\n                    <label htmlFor=\"speedRangeSlider\">Speed: {ALLOWED_DELAYS.indexOf(this.state.delay) + 1}x</label>\r\n                    <input type=\"range\" className=\"slider\" id=\"speedRangeSlider\"\r\n                        min=\"1\" max={ALLOWED_DELAYS.length}\r\n                        value={ALLOWED_DELAYS.indexOf(this.state.delay) + 1} \r\n                        onChange={this.onSpeedChange} />\r\n                </div> \r\n            </div> \r\n        );\r\n    }\r\n    renderView(){\r\n        switch(this.state.rendererId){\r\n            case 1: return ( \r\n                <VerticalBarsRenderer \r\n                    ref={x => this.renderer = x} \r\n                    array={this.state.array} \r\n                    onSwap={(a,b) => this.updateSound(a,b)}\r\n                    onReplace={(a,b) => this.updateSound(a,b)} \r\n                    onCompare={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onWait={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onAnimationFinished={()=> this.stopSortAnimation()}\r\n                />);\r\n            case 2: return (\r\n                <ColorsRenderer \r\n                    ref={x => this.renderer = x} \r\n                    array={this.state.array} \r\n                    onSwap={(a,b) => this.updateSound(a,b)}\r\n                    onReplace={(a,b) => this.updateSound(a,b)} \r\n                    onCompare={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onWait={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onAnimationFinished={()=> this.stopSortAnimation()}\r\n                />\r\n            );\r\n            default: return null; \r\n        }\r\n    }\r\n    returnRenderer(rendererId){\r\n        switch(rendererId){\r\n            case 1: return new VerticalBarsRenderer(); \r\n            case 2: return new ColorsRenderer(); \r\n            default: return null; \r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './About.css';\r\n \r\nexport class About extends Component{\r\n    static displayName = About.name;\r\n \r\n    render(){\r\n        return ( <div className=\"about\">\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>About</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\"> \r\n                    <p>This is a web application used to visualize different sorting algorithm on a random set of data represented by vertical bars.</p>\r\n                    <p>I made this project to learn front-end web development with javascript+react and to recap/learn different sorting algorithms.</p>\r\n                    <p>It is built with Javascript, React.JS and it's also a <a href=\"https://developers.google.com/web/progressive-web-apps\">progressive web application</a>.</p>\r\n                    <p>You can access a deployed version at <a href=\"https://ciucacosmin109.github.io/SortingVisualizer\">Github pages</a>.</p>\r\n                       \r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>Download a local version</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">   \r\n                    <p>Clone the repository:</p>\r\n                    <code>&gt; git clone https://github.com/ciucacosmin109/SortingVisualizer.git</code><br/>\r\n                    <code>&gt; cd SortingVisualizer</code><br/><br/>\r\n                    \r\n                    <p>Install the dependencies:</p>\r\n                    <code>&gt; npm install</code><br/><br/>\r\n\r\n                    <p>Runs the app in the development mode:</p>\r\n                    <code>&gt; npm start</code><br/><br/>\r\n\r\n                    <p>The default web browser should open automatically and redirect you to <a href=\"http://localhost:3000\">http://localhost:3000</a></p>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>License</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">    \r\n                    <p><a href=\"https://github.com/ciucacosmin109/SortingVisualizer/blob/master/LICENSE\">GPL v3</a></p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport './custom.css'\r\n\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './scenes/Home'; \r\nimport { About } from './scenes/About';\r\n \r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} /> \r\n                <Route exact path='/index' component={Home} /> \r\n                <Route exact path='/index.html' component={Home} /> \r\n                <Route exact path='/about' component={About} /> \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}