{"version":3,"sources":["components/NavMenu.js","components/Layout.js","utils/SoundPlayer.js","algorithms/SortResult.js","renderers/VerticalBarsRenderer.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSortRecursive.js","algorithms/MergeSortIterative.js","algorithms/CocktailSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","algorithms/ShellSort.js","scenes/Home.js","scenes/About.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","NavItem","tag","Link","isActive","_","location","includes","pathname","activeClassName","className","to","style","display","exact","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","renderItems","Component","displayName","name","Layout","children","SoundPlayer","sound","audioContext","gainNode","oscillator","deleteSoundService","window","AudioContext","webkitAudioContext","createGain","gain","value","connect","destination","createOscillator","type","frequency","start","currentTime","stop","disconnect","close","val","max","SortResult","sortedArray","animations","anim","push","nrWaitAnims","i","SortWaitAnimation","i_idx","j_idx","SortCompareAnimation","SortSwapAnimation","subArrToReplace","SortReplaceAnimation","animation","j","subArrayToReplace","VerticalBarsRenderer","array","animState","loop","loopFunction","playing","delay","currentStep","toUncolor","bars","color","length","backgroundColor","index","isCompareAnimation","onAnimationFinished","paintArray","isWaitAnimation","paintArrayIndex","pop","isSwapAnimation","a","b","temp","update","onSwap","isReplaceAnimation","k","setInterval","resume","clearInterval","newArray","map","number","key","ref","x","height","marginTop","Math","BubbleSort","arrayToSort","modifyTheOriginal","result","sorted","addCompareAnimation","addSwapAnimation","addReplaceAnimation","InsertionSort","current","SelectionSort","minIdx","MergeSortRecursive","mergeSortRec","l","r","m","merge","left","middle","right","start1","start2","idx","slice","MergeSortIterative","mergeSortIter","n","size","min","CocktailSort","QuickSort","quickSort","arr","pivotIndex","partition","pivot","HeapSort","heapSort","dim","filter","pos","largest","ShellSort","gap","elem","ALLOWED_DELAYS","Home","onAlgorithmChange","event","newId","parseInt","target","algorithmId","onSpeedChange","renderer","isPlaying","v","pause","onArraySizeChange","arraySize","soundEnabled","generateNewArray","stopSortAnimation","floor","random","setArray","sortResult","sort","console","log","getSortResult","initSoundService","instantSort","next","setOscillatorFrequency","clearOscillatorFrequency","getCurrentStep","pauseSortAnimation","resumeSortAnimation","startSortAnimation","htmlFor","id","onChange","disabled","onPlayButtonClick","playNext","indexOf","checked","updateSound","About","href","App","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18db6ad8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem } from 'reactstrap';\r\n\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n\r\n    renderItems() {\r\n        return (<>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    isActive={(/*match*/_, location) => [\"/\", \"/index\", \"/index.html\"].includes(location.pathname)} \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/\">\r\n                        <p style={{display: \"inline\"}}>Home</p>\r\n                </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    exact \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/about\">\r\n                        <p style={{display: \"inline\"}}>About</p>\r\n            </NavLink>\r\n            </NavItem>\r\n        </>);\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-black border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Sorting Visualizer</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                {this.renderItems()}\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const MIN_FREQ = 180;\r\nconst MAX_FREQ = 750;\r\n\r\nexport class SoundPlayer {\r\n    constructor(){ \r\n        this.sound = {  \r\n            audioContext : null,\r\n            gainNode : null,\r\n            oscillator : null\r\n        };  \r\n    }\r\n\r\n    initSoundService(){   \r\n        this.deleteSoundService();\r\n\r\n        this.sound.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.sound.gainNode = this.sound.audioContext.createGain()\r\n        this.sound.gainNode.gain.value = 0.15 \r\n        this.sound.gainNode.connect(this.sound.audioContext.destination)\r\n\r\n        this.sound.oscillator = this.sound.audioContext.createOscillator();\r\n        this.sound.oscillator.type = 'sine'; // sine, square, sawtooth, triangle\r\n        this.sound.oscillator.frequency.value = 0; \r\n        this.sound.oscillator.connect(this.sound.gainNode);\r\n        \r\n        this.sound.oscillator.start(this.sound.audioContext.currentTime); \r\n    } \r\n    deleteSoundService(){ \r\n        if(this.sound.oscillator === null)\r\n            return;\r\n        \r\n        this.sound.oscillator.stop(this.sound.audioContext.currentTime); \r\n        this.sound.oscillator = null;\r\n\r\n        this.sound.gainNode.disconnect();\r\n        this.sound.gainNode = null;\r\n        \r\n        this.sound.audioContext.close();\r\n        this.sound.audioContext = null;\r\n    }\r\n\r\n    setOscillatorFrequency(val, max){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = \r\n                val / max * (MAX_FREQ - MIN_FREQ) + MIN_FREQ;\r\n    }\r\n    clearOscillatorFrequency(){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = 0;\r\n    }\r\n}","\r\nexport class SortResult {\r\n    constructor() { \r\n        this.sortedArray = []; \r\n        this.animations = []; \r\n    }\r\n\r\n    addAnimationObject(anim) {\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    addEmptyAnimation(nrWaitAnims) {\r\n        for (let i = 0; i < nrWaitAnims; i++) { \r\n            let anim = new SortWaitAnimation();\r\n            this.animations.push(anim);\r\n        }\r\n    }\r\n    addCompareAnimation(i_idx, j_idx) {\r\n        let anim = new SortCompareAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addSwapAnimation(i_idx, j_idx) {\r\n        let anim = new SortSwapAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addReplaceAnimation(i_idx, j_idx, subArrToReplace) {\r\n        let anim = new SortReplaceAnimation(i_idx, j_idx, subArrToReplace);\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    static isWaitAnimation(animation) { return (animation instanceof SortWaitAnimation); }\r\n    static isCompareAnimation(animation) { return (animation instanceof SortCompareAnimation); }\r\n    static isSwapAnimation(animation) { return ( animation instanceof SortSwapAnimation ); }\r\n    static isReplaceAnimation(animation) { return (animation instanceof SortReplaceAnimation); }\r\n \r\n}\r\n\r\n// Animations\r\nexport class SortCompareAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n}\r\nexport class SortSwapAnimation {\r\n    constructor(i_idx, j_idx/*,newSortedElem*/) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n\r\n        //this.newSortedElements = newSortedElem;\r\n    }\r\n} \r\nexport class SortReplaceAnimation {\r\n    constructor(i_idx, j_idx, subArrToReplace) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n         \r\n        this.subArrayToReplace = subArrToReplace;\r\n    }\r\n}\r\nexport class SortWaitAnimation { } \r\n","import React, { Component } from 'react';\r\nimport { SortResult } from '../algorithms/SortResult.js'; \r\n\r\nimport './VerticalBarsRenderer.css'\r\n\r\nexport const INITIAL_COLOR = \"darkgray\";\r\nexport const SORTED_COLOR = \"green\";\r\nexport const COMPARE_COLOR = \"red\";\r\nexport const SWAP_COLOR = \"red\";\r\nexport const REPLACE_COLOR = \"violet\";\r\n \r\nexport class VerticalBarsRenderer extends Component{ \r\n    static displayName = VerticalBarsRenderer.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: this.props != null && this.props.array != null \r\n                ? this.props.array \r\n                : [], \r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps \r\n            loopFunction: null, // The function used by the timer\r\n            playing: false,\r\n            delay: 1,\r\n            \r\n            animations: null, // Animations from SortResult\r\n            currentStep: 0, // To be able to go to the next step \r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n            \r\n        this.bars = []; // Refereces to vertical bars\r\n    }   \r\n\r\n    paintArray(color) {   \r\n        for (let i = 0; i < this.state.array.length; i++) \r\n            this.bars[i].style.backgroundColor = color; \r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0)  \r\n            this.bars[index].style.backgroundColor = color; \r\n    } \r\n    \r\n    loopFunction() {\r\n        let currentStep = this.animState.currentStep;\r\n        let animations = this.animState.animations;\r\n\r\n        // Skip useless animations at high speed\r\n        while( this.animState.delay === 1 && \r\n            this.animState.playing === true && \r\n            SortResult.isCompareAnimation(animations[this.animState.currentStep]) \r\n        ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        }\r\n\r\n        // End the loop\r\n        if (currentStep >= animations.length) {\r\n            // Event\r\n            if(this.props != null && this.props.onAnimationFinished != null)\r\n                this.props.onAnimationFinished();\r\n            \r\n            this.stop(); \r\n            this.paintArray(SORTED_COLOR); \r\n            \r\n            return;\r\n        } \r\n\r\n        // Play the animation\r\n        if (SortResult.isWaitAnimation(animations[currentStep])) {\r\n            // Uncolor the last colored elements\r\n            while (this.animState.toUncolor.length > 0) {\r\n                this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n            }\r\n        } else if (SortResult.isCompareAnimation(animations[currentStep])) {  \r\n            // Uncolor the last colored elements\r\n            while (this.animState.toUncolor.length > 0) {\r\n                this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n            }\r\n\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isSwapAnimation(animations[currentStep])) {\r\n            // Uncolor the last colored elements\r\n            while (this.animState.toUncolor.length > 0) {\r\n                this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n            }\r\n\r\n            this.paintArrayIndex(SWAP_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(SWAP_COLOR, animations[currentStep].j);\r\n            \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n\r\n            let temp = this.state.array[a];\r\n            // eslint-disable-next-line\r\n            this.state.array[a] = this.state.array[b];\r\n            // eslint-disable-next-line\r\n            this.state.array[b] = temp;\r\n\r\n            this.setState({update: true}); // because i'm not using setState above\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onSwap != null)\r\n                this.props.onSwap(this.state.array[a],this.state.array[b]);\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isReplaceAnimation(animations[currentStep])) {\r\n            // Uncolor the last colored elements\r\n            while (this.animState.toUncolor.length > 0) {\r\n                this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n            }\r\n\r\n            for (let k = animations[currentStep].i; k <= animations[currentStep].j; k++) {\r\n                this.paintArrayIndex(REPLACE_COLOR, k);\r\n                \r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(k); \r\n\r\n                // eslint-disable-next-line\r\n                this.state.array[k] = animations[currentStep].subArrayToReplace[k - animations[currentStep].i];\r\n            }\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n             \r\n            // Event\r\n            if(this.props != null && this.props.onSwap != null)\r\n                this.props.onSwap(this.state.array[animations[currentStep].i],this.state.array[animations[currentStep].j]);\r\n  \r\n            this.setState({update: true}); // because i'm not using setState above\r\n\r\n        }\r\n\r\n        // Update the current step\r\n        this.animState.currentStep++;\r\n    }\r\n\r\n    isPlaying(){ \r\n        return this.animState.playing; \r\n    }\r\n    start(animations, delay){ \r\n        if(this.state.array.length === 0)\r\n            return;\r\n\r\n        if (this.animState.currentStep !== 0){\r\n            this.resume(delay);\r\n            return;\r\n        }  \r\n  \r\n        // Init\r\n        this.stop(); \r\n        this.animState.playing = true;\r\n        this.animState.delay = delay;\r\n        this.animState.animations = animations; \r\n        this.animState.currentStep = 0;  \r\n        this.animState.toUncolor = [];\r\n        this.paintArray(INITIAL_COLOR);\r\n \r\n        // Start the loop\r\n        this.animState.loopFunction = () => this.loopFunction();\r\n        this.animState.loop = setInterval(this.animState.loopFunction, delay);\r\n\r\n    }\r\n    resume(delay){ \r\n        if(this.state.array.length === 0 || this.animState.currentStep === 0) \r\n            return; \r\n\r\n        this.animState.playing = true; \r\n        this.animState.delay = delay;\r\n        this.animState.loop = setInterval(this.animState.loopFunction, delay); \r\n    }\r\n    pause(){ \r\n        clearInterval(this.animState.loop); \r\n        this.animState.playing = false;\r\n    }\r\n    stop(){ \r\n        this.animState.playing = false;\r\n\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0; \r\n        this.paintArray(INITIAL_COLOR); \r\n    }\r\n\r\n    next() { this.animState.loopFunction(); }\r\n    getCurrentStep(){ return this.animState.currentStep; }\r\n \r\n    setArray(newArray){\r\n        this.stop();\r\n        this.setState({array: newArray});\r\n    } \r\n \r\n    render() {   \r\n        return (  \r\n            <div className=\"vbars-render-zone\">\r\n                {\r\n                    this.state.array.map((number, index) => \r\n                        <div key={index} ref={x=>this.bars[index] = x} style={{\r\n                            height: number,\r\n                            marginTop: Math.max(...this.state.array) - number\r\n                        }} className=\"vertical-bar\"></div>\r\n                    )\r\n                }\r\n            </div> \r\n        );\r\n    }\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class BubbleSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let sorted = false; \r\n        for (let k = 0; k < array.length && !sorted; k++) {\r\n            sorted = true;\r\n\r\n            for (let i = 0; i < array.length - k - 1; i++) {\r\n                // Register the check into the animations\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i+1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n\r\n                    // Register the swap into the animations\r\n                    result.addSwapAnimation(i, i + 1); \r\n                }\r\n            }\r\n        } \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class InsertionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 1; i < array.length; i++) { \r\n            let current = array[i]; \r\n            // Register the check into the animations\r\n            result.addCompareAnimation(i, i);\r\n\r\n            let j = i - 1;\r\n            while (j >= 0 && current < array[j]) { \r\n                array[j + 1] = array[j]; \r\n                 \r\n                // Register the move into the animations  \r\n                result.addSwapAnimation(j, j + 1);\r\n\r\n                j--;\r\n            }\r\n            array[j + 1] = current;\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class SelectionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n\r\n            let minIdx = i;\r\n            for (let j = i + 1; j < array.length; j++) { \r\n                // Add check\r\n                result.addCompareAnimation(minIdx, j);\r\n\r\n                if (array[j] < array[minIdx]) {\r\n                    minIdx = j;\r\n                }\r\n            }\r\n                \r\n            let temp = array[minIdx];\r\n            array[minIdx] = array[i];\r\n            array[i] = temp;\r\n\r\n            // Add movement \r\n            result.addSwapAnimation(minIdx, i);\r\n        } \r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortRecursive {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n         \r\n        MergeSortRecursive.mergeSortRec(array, 0, array.length-1, result);\r\n         \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static mergeSortRec(array, l, r, result) {\r\n        if (l < r) {\r\n            let m = ~~((r - l) / 2 + l);\r\n            MergeSortRecursive.mergeSortRec(array, l, m, result);\r\n            MergeSortRecursive.mergeSortRec(array, m + 1, r, result);\r\n\r\n            MergeSortRecursive.merge(array, l, m, r, result); \r\n            //this.addAnimationsOld(array, result, l, m, r);\r\n        }\r\n    } \r\n    static merge(array, left, middle, right, result) { // In-place merge function\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n         \r\n        if (array[middle] <= array[start2]) \r\n            return; \r\n         \r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n                 \r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n                     \r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n                 \r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n     \r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortIterative {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        MergeSortIterative.mergeSortIter(array, result); \r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static mergeSortIter(array, result) {\r\n        let n = array.length;\r\n        for (let size = 1; size < n; size = 2 * size) {\r\n            for (let left = 0; left < n - 1; left = left + 2 * size) {\r\n                let middle = Math.min(left + size - 1, n - 1);\r\n                let right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                MergeSortIterative.merge(array, left, middle, right, result); \r\n            }\r\n\r\n        }\r\n    }\r\n    static merge(array, left, middle, right, result) {\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n\r\n        if (array[middle] <= array[start2])\r\n            return;\r\n\r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n\r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n\r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n\r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class CocktailSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let left = 0, right = array.length - 1; \r\n\r\n        let sorted = false;\r\n        while (!sorted) {\r\n            sorted = true;\r\n\r\n            for (let i = left; i < right; i++) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i + 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n                     \r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i + 1);\r\n                }\r\n            }\r\n            if (sorted) break;\r\n            right--;\r\n            sorted = true;\r\n\r\n            for (let i = right; i > left; i--) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i - 1);\r\n\r\n                if (array[i] < array[i - 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i - 1];\r\n                    array[i - 1] = temp;\r\n\r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i - 1);\r\n                }\r\n            }\r\n            left++;\r\n        }\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n}","import {SortResult} from './SortResult.js'\r\n\r\nexport class QuickSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        QuickSort.quickSort(array, 0, array.length - 1, result);\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static quickSort(arr, left, right, result) {\r\n        if (left < right) {\r\n            let pivotIndex = QuickSort.partition(arr, left, right, result);\r\n             \r\n            QuickSort.quickSort(arr, left, pivotIndex - 1, result); \r\n            QuickSort.quickSort(arr, pivotIndex, right, result); \r\n        }\r\n    }\r\n    static partition(arr, left, right, result) {\r\n        let pivot = arr[~~((left + right) / 2)];\r\n\r\n        while (left <= right) { \r\n\r\n            while (arr[left] < pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                left++;\r\n            }\r\n\r\n            while (arr[right] > pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                right--;\r\n            }\r\n\r\n            if (left <= right) {\r\n                // Swap\r\n                [arr[left], arr[right]] = [arr[right], arr[left]];\r\n\r\n                // Animation \r\n                result.addSwapAnimation(left, right);\r\n\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n} \r\n// 6 7 9 8 9 ","import {SortResult} from './SortResult.js'\r\n\r\nexport class HeapSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        HeapSort.heapSort(array, result);\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static heapSort(arr, result)  {  \r\n        let dim = arr.length;\r\n\r\n        // Filter the array to make a heap\r\n        for (let i = ~~(dim / 2 - 1); i >= 0; i--) \r\n            HeapSort.filter(arr, dim, i, result); \r\n      \r\n        // Extract the elements from the heap \r\n        for (let i=dim-1; i>0; i--) {  \r\n            [arr[0], arr[i]] = [arr[i], arr[0]]; // Extract the max element to the end \r\n             \r\n            result.addSwapAnimation(0, i);\r\n\r\n            HeapSort.filter(arr, i, 0, result); // Filter from the new root\r\n        } \r\n    } \r\n    static filter(arr, size, pos, result) \r\n    { \r\n        let dim = size;\r\n        \r\n        let largest = pos; \r\n        let right = 2*pos + 2; \r\n        let left = 2*pos + 1;\r\n        \r\n        result.addCompareAnimation(right, largest); \r\n        if (right < dim && arr[right] > arr[largest]) \r\n            largest = right; \r\n      \r\n        result.addCompareAnimation(left, largest); \r\n        if (left < dim && arr[left] > arr[largest]) \r\n            largest = left; \r\n       \r\n        // Change and refilter\r\n        if (largest !== pos)  { \r\n            [arr[pos], arr[largest]] = [arr[largest], arr[pos]];\r\n \r\n            result.addSwapAnimation(pos, largest);\r\n\r\n            HeapSort.filter(arr, size, largest, result); \r\n        } \r\n    } \r\n} \r\n// 1 0 3 6 3 7 9","import { SortResult } from './SortResult.js';\r\n\r\nexport class ShellSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n                result.addCompareAnimation(i, i);\r\n \r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > array[j+gap]){\r\n                    [array[j+gap] ,array[j]] = [array[j], array[j+gap]];\r\n                    result.addCompareAnimation(j, j+gap);\r\n                    result.addSwapAnimation(j, j+gap);\r\n                    \r\n                    j -= gap;\r\n                } \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n    static sort_d(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n\r\n                let elem = array[i];\r\n\r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > elem){\r\n                    array[j+gap] = array[j]; \r\n                    j -= gap;\r\n                }\r\n                array[j+gap] = elem; \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { SoundPlayer } from '../utils/SoundPlayer'\r\nimport { VerticalBarsRenderer, SORTED_COLOR } from '../renderers/VerticalBarsRenderer';\r\n\r\nimport './Home.css';\r\n \r\n//import { SortResult } from '../algorithms/SortResult.js'; \r\nimport { BubbleSort } from '../algorithms/BubbleSort.js';\r\nimport { InsertionSort } from '../algorithms/InsertionSort.js';\r\nimport { SelectionSort } from '../algorithms/SelectionSort.js';\r\nimport { MergeSortRecursive } from '../algorithms/MergeSortRecursive.js';\r\nimport { MergeSortIterative } from '../algorithms/MergeSortIterative.js';\r\nimport { CocktailSort } from '../algorithms/CocktailSort.js';\r\nimport { QuickSort } from '../algorithms/QuickSort.js';\r\nimport { HeapSort } from '../algorithms/HeapSort';\r\nimport { ShellSort } from '../algorithms/ShellSort';\r\n \r\nconst INITIAL_ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_ELEMENT = 300;\r\nconst ALLOWED_DELAYS = [1000, 300, 100, 40, 15, 1];\r\n \r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: [], // The current array  \r\n \r\n            algorithmId: 7, // Used by the algo combo-box\r\n            arraySize : INITIAL_ARRAY_SIZE, // Used by the array size slider 10-500\r\n\r\n            playing: false,\r\n            delay: 1, // Used by the speed slider = [1,100]\r\n            soundEnabled: true // Used by the checkbox \r\n        };\r\n \r\n        this.renderer = new VerticalBarsRenderer();\r\n        this.sound = new SoundPlayer();\r\n    } \r\n    componentDidMount() { this.generateNewArray(); }   \r\n    componentWillUnmount() { this.stopSortAnimation(); }  \r\n \r\n    generateNewArray() { \r\n        let randomNumber = (a, b) => {\r\n            return Math.floor(Math.random() * (b - a) + a);\r\n        }\r\n\r\n        let arr = [];\r\n        for (let i = 0; i < this.state.arraySize; i++) {\r\n            arr.push(randomNumber(1, MAX_ARRAY_ELEMENT));\r\n        }\r\n        this.setState({ array: arr },()=>{ \r\n            if(this.renderer !== null){ \r\n                this.renderer.setArray(this.state.array);\r\n            }\r\n        });  \r\n    }\r\n  \r\n    getSortResult(modifyTheOriginal = false) { // returns a SortResult object based on selected algorithm\r\n        let sortResult;\r\n        switch (this.state.algorithmId) {\r\n            case 1:\r\n                sortResult = BubbleSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 2:\r\n                sortResult = InsertionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 3:\r\n                sortResult = SelectionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 4:\r\n                sortResult = MergeSortRecursive.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 5:\r\n                sortResult = MergeSortIterative.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 6:\r\n                sortResult = QuickSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 7:\r\n                sortResult = HeapSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 8:\r\n                sortResult = ShellSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 9:\r\n                sortResult = CocktailSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(sortResult); \r\n\r\n        return sortResult;\r\n    }\r\n    instantSort() {  \r\n        this.stopSortAnimation();\r\n\r\n        // Sorts the array\r\n        this.getSortResult(true);  \r\n        this.renderer.paintArray(SORTED_COLOR);\r\n    }\r\n\r\n    // Methods for controling the renderer and the sound player\r\n    startSortAnimation() { \r\n        // Get the animations \r\n        let sortResult = this.getSortResult();  \r\n        if (typeof sortResult === 'undefined') {  \r\n            return; \r\n        } \r\n        if (sortResult.animations.length === 0) {\r\n            this.instantSort();\r\n            return;\r\n        }\r\n\r\n        this.renderer.start(sortResult.animations, this.state.delay);\r\n        this.setState({playing: true});\r\n\r\n        // Start the sound oscillator  \r\n        this.sound.initSoundService();  \r\n    }\r\n    resumeSortAnimation() {\r\n        this.renderer.resume(this.state.delay);\r\n        this.setState({playing: true});\r\n\r\n        // Start the sound oscillator  \r\n        this.sound.initSoundService(); \r\n    }\r\n    pauseSortAnimation() { \r\n        this.renderer.pause();\r\n        this.setState({playing: false});\r\n\r\n        // Stop the sound oscillator\r\n        this.sound.deleteSoundService();  \r\n    }\r\n    stopSortAnimation() {\r\n        this.renderer.stop();\r\n        this.setState({playing: false});\r\n\r\n        // Stop the sound oscillator\r\n        this.sound.deleteSoundService();  \r\n    } \r\n    playNext() { this.renderer.next(); }\r\n\r\n    updateSound(a, b){ \r\n        if(this.state.soundEnabled) \r\n            this.sound.setOscillatorFrequency((a+b)/2, MAX_ARRAY_ELEMENT);\r\n        else \r\n            this.sound.clearOscillatorFrequency(); \r\n    }\r\n\r\n    // Controls handlers\r\n    onAlgorithmChange = (event) => {\r\n        let newId = parseInt(event.target.value);\r\n        this.setState({ algorithmId: newId });\r\n    }\r\n    onSpeedChange = (event) => {\r\n        let resume = this.renderer.isPlaying();\r\n        let v = parseInt(event.target.value);\r\n\r\n        this.renderer.pause(); \r\n        this.setState({playing: false});\r\n         \r\n        this.setState({ delay: ALLOWED_DELAYS[v - 1] }, () => {\r\n            if(resume === true){\r\n                this.renderer.resume(this.state.delay);\r\n                this.setState({playing: true});\r\n            }\r\n        });\r\n    }\r\n    onArraySizeChange = (event) => { \r\n        let v = parseInt(event.target.value); \r\n        this.setState({ arraySize: v });\r\n    } \r\n    onPlayButtonClick(){ \r\n        if(!this.renderer.isPlaying() && this.renderer.getCurrentStep() === 0)\r\n            this.startSortAnimation();\r\n        else if(!this.renderer.isPlaying())\r\n            this.resumeSortAnimation();\r\n        else \r\n            this.pauseSortAnimation();\r\n    }\r\n\r\n    // Render method\r\n    render() {  \r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"selectAlgoDropDown\"><h6>Algorithm</h6></label>\r\n                            <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                                onChange={this.onAlgorithmChange} value={this.state.algorithmId}>\r\n                                <option value={1}>Bubble sort</option>\r\n                                <option value={2}>Insertion sort</option>\r\n                                <option value={3}>Selection sort</option>\r\n                                <option value={4}>Merge sort (recursive)</option>\r\n                                <option value={5}>Merge sort (iterative)</option>\r\n                                <option value={6}>Quick sort</option>\r\n                                <option value={7}>Heap sort</option>\r\n                                <option value={8}>Shell sort</option>\r\n                                <option value={-1} disabled> </option>\r\n                                <option value={9}>Cocktail sort</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    { this.renderer != null ? <>\r\n                        <div className=\"card-header\">\r\n                            <button className=\"btn btn-primary btn-sm\"\r\n                                onClick={() => {\r\n                                    this.stopSortAnimation();\r\n                                    this.generateNewArray();\r\n                                }}>New array</button>\r\n\r\n                            <button className=\"btn btn-success btn-sm\"\r\n                                onClick={() => this.instantSort()}>Instant sort</button>\r\n                            \r\n                            <div className=\"range-input form-inline div-right\">\r\n                                <label htmlFor=\"sizeRangeSlider\">Array's size: {this.state.arraySize}</label>\r\n                                <input type=\"range\" className=\"slider\" id=\"sizeRangeSlider\"\r\n                                    min=\"10\" max=\"500\" value={this.state.arraySize} \r\n                                    onChange={this.onArraySizeChange} />\r\n                            </div> \r\n                        </div>\r\n                    \r\n                        <div className=\"card-body\"> \r\n                            <button\r\n                                onClick={() => this.onPlayButtonClick()}\r\n                                className={\"btn btn-sm \" + (!this.state.playing && this.renderer.getCurrentStep() === 0\r\n                                    ? \"btn-success\"\r\n                                    : \"btn-warning\")}>\r\n\r\n                                {!this.state.playing && this.renderer.getCurrentStep() === 0\r\n                                    ? \" > Play\"\r\n                                    : (!this.state.playing ? \" > Resume\" : \" | | Pause\")}\r\n                            </button>\r\n                            <button onClick={() => this.stopSortAnimation()} className=\"btn btn-danger btn-sm\">Stop</button>\r\n\r\n                            <button onClick={!this.state.playing && this.renderer.getCurrentStep() !== 0 ? () => this.playNext() : () => null}\r\n                                disabled={this.state.playing || this.renderer.getCurrentStep() === 0}\r\n                                className=\"btn btn-sm btn-warning\">\r\n                                {\" > Next\"}\r\n                            </button>\r\n\r\n                            <div className=\"range-input form-inline div-right\">\r\n                                <label htmlFor=\"speedRangeSlider\">Speed: {ALLOWED_DELAYS.indexOf(this.state.delay) + 1}x</label>\r\n                                <input type=\"range\" className=\"slider\" id=\"speedRangeSlider\"\r\n                                    min=\"1\" max={ALLOWED_DELAYS.length}\r\n                                    value={ALLOWED_DELAYS.indexOf(this.state.delay) + 1} \r\n                                    onChange={this.onSpeedChange} />\r\n                            </div> \r\n                        </div></>\r\n                        : null\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h6>View</h6>\r\n \r\n                        <div className=\"form-check div-right\">\r\n                            <input type=\"checkbox\" className=\"form-check-input\" id=\"soundCheck\"\r\n                                checked={this.state.soundEnabled}\r\n                                onChange={()=> this.setState({ soundEnabled: !this.state.soundEnabled })}/>\r\n                            <label className=\"form-check-label\" htmlFor=\"soundCheck\">Sound</label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-body render-zone\"> \r\n                        <VerticalBarsRenderer \r\n                            ref={x => this.renderer = x} \r\n                            array={this.state.array} \r\n                            onSwap={(a,b) => this.updateSound(a,b)}\r\n                            onAnimationFinished={()=> this.stopSortAnimation()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './About.css';\r\n \r\nexport class About extends Component{\r\n    static displayName = About.name;\r\n \r\n    render(){\r\n        return ( <div className=\"about\">\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>About</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\"> \r\n                    <p>This is a web application used to visualize different sorting algorithm on a random set of data represented by vertical bars.</p>\r\n                    <p>I made this project to learn front-end web development with javascript+react and to recap/learn different sorting algorithms.</p>\r\n                    <p>It is built with Javascript, React.JS and it's also a <a href=\"https://developers.google.com/web/progressive-web-apps\">progressive web application</a>.</p>\r\n                    <p>You can access a deployed version at <a href=\"https://ciucacosmin109.github.io/SortingVisualizer\">Github pages</a>.</p>\r\n                       \r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>Download a local version</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">   \r\n                    <p>Clone the repository:</p>\r\n                    <code>&gt; git clone https://github.com/ciucacosmin109/SortingVisualizer.git</code><br/>\r\n                    <code>&gt; cd SortingVisualizer</code><br/><br/>\r\n                    \r\n                    <p>Install the dependencies:</p>\r\n                    <code>&gt; npm install</code><br/><br/>\r\n\r\n                    <p>Runs the app in the development mode:</p>\r\n                    <code>&gt; npm start</code><br/><br/>\r\n\r\n                    <p>The default web browser should open automatically and redirect you to <a href=\"http://localhost:3000\">http://localhost:3000</a></p>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>License</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">    \r\n                    <p><a href=\"https://github.com/ciucacosmin109/SortingVisualizer/blob/master/LICENSE\">GPL v3</a></p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport './custom.css'\r\n\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './scenes/Home'; \r\nimport { About } from './scenes/About';\r\n \r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} /> \r\n                <Route exact path='/index' component={Home} /> \r\n                <Route exact path='/index.html' component={Home} /> \r\n                <Route exact path='/about' component={About} /> \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}