{"version":3,"sources":["components/NavMenu.js","components/Layout.js","algorithms/SortResult.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSortRecursive.js","algorithms/MergeSortIterative.js","algorithms/CocktailSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","algorithms/ShellSort.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","NavItem","tag","Link","isActive","_","location","includes","pathname","activeClassName","className","to","style","display","exact","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","renderItems","Component","displayName","name","Layout","children","SortEmptyAnimation","SortCompareAnimation","i_idx","j_idx","i","j","SortSwapAnimation","SortReplaceAnimation","subArrToReplace","subArrayToReplace","SortResult","sortedArray","animations","anim","push","nrEmptyAnims","animation","BubbleSort","arrayToSort","modifyTheOriginal","array","result","sorted","k","length","addCompareAnimation","temp","addSwapAnimation","addReplaceAnimation","InsertionSort","current","SelectionSort","minIdx","MergeSortRecursive","mergeSortRec","l","r","m","merge","left","middle","right","start1","start2","val","idx","slice","MergeSortIterative","mergeSortIter","n","size","Math","min","CocktailSort","QuickSort","quickSort","arr","pivotIndex","partition","pivot","HeapSort","heapSort","dim","filter","pos","largest","ShellSort","gap","elem","ALLOWED_DELAYS","Home","onAlgorithmChange","event","newId","parseInt","target","value","algorithmId","onSpeedChange","pauseSortAnimation","v","delay","onArraySizeChange","config","arraySize","update","playing","soundEnabled","animState","loop","loopFunction","currentStep","numberOfSteps","toUncolor","sound","audioContext","gainNode","oscillator","generateNewArray","stopSortAnimation","a","b","floor","random","paintArray","color","document","getElementById","backgroundColor","index","deleteSoundService","window","AudioContext","webkitAudioContext","createGain","gain","connect","destination","createOscillator","type","frequency","start","currentTime","stop","disconnect","close","initSoundService","isEmptyAnimation","paintArrayIndex","pop","isCompareAnimation","isSwapAnimation","setOscillatorFrequency","clearOscillatorFrequency","isReplaceAnimation","setInterval","instantSort","sortResult","sort","console","log","getSortResult","playAnimations","clearInterval","htmlFor","id","onChange","disabled","max","resumeSortAnimation","startSortAnimation","playNext","indexOf","checked","map","number","key","height","marginTop","About","href","App","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","baseUrl","getElementsByTagName","getAttribute","rootElement","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b4e2c41.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem } from 'reactstrap';\r\n\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n\r\n    renderItems() {\r\n        return (<>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    isActive={(/*match*/_, location) => [\"/\", \"/index\", \"/index.html\"].includes(location.pathname)} \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/\">\r\n                        <p style={{display: \"inline\"}}>Home</p>\r\n                </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    exact \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/about\">\r\n                        <p style={{display: \"inline\"}}>About</p>\r\n            </NavLink>\r\n            </NavItem>\r\n        </>);\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-black border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Sorting Visualizer</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                {this.renderItems()}\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* \r\nsortedArray : []\r\nanimations : [...]\r\n\r\n*/\r\n\r\nexport class SortEmptyAnimation { } \r\nexport class SortCompareAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n}\r\nexport class SortSwapAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n} \r\nexport class SortReplaceAnimation {\r\n    constructor(i_idx, j_idx, subArrToReplace) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n         \r\n        this.subArrayToReplace = subArrToReplace;\r\n    }\r\n}\r\n\r\nexport class SortResult {\r\n    constructor() { \r\n        this.sortedArray = []; \r\n        this.animations = []; \r\n    }\r\n\r\n    addAnimationObject(anim) {\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    addEmptyAnimation(nrEmptyAnims) {\r\n        for (let i = 0; i < nrEmptyAnims; i++) { \r\n            let anim = new SortEmptyAnimation();\r\n            this.animations.push(anim);\r\n        }\r\n    }\r\n    addCompareAnimation(i_idx, j_idx) {\r\n        let anim = new SortCompareAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addSwapAnimation(i_idx, j_idx) {\r\n        let anim = new SortSwapAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addReplaceAnimation(i_idx, j_idx, subArrToReplace) {\r\n        let anim = new SortReplaceAnimation(i_idx, j_idx, subArrToReplace);\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    static isEmptyAnimation(animation) { return (animation instanceof SortEmptyAnimation); }\r\n    static isCompareAnimation(animation) { return (animation instanceof SortCompareAnimation); }\r\n    static isSwapAnimation(animation) { return ( animation instanceof SortSwapAnimation ); }\r\n    static isReplaceAnimation(animation) { return (animation instanceof SortReplaceAnimation); }\r\n\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class BubbleSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let sorted = false; \r\n        for (let k = 0; k < array.length && !sorted; k++) {\r\n            sorted = true;\r\n\r\n            for (let i = 0; i < array.length - k - 1; i++) {\r\n                // Register the check into the animations\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i+1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n\r\n                    // Register the swap into the animations\r\n                    result.addSwapAnimation(i, i + 1); \r\n                }\r\n            }\r\n        } \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class InsertionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 1; i < array.length; i++) { \r\n            let current = array[i]; \r\n            // Register the check into the animations\r\n            result.addCompareAnimation(i, i);\r\n\r\n            let j = i - 1;\r\n            while (j >= 0 && current < array[j]) { \r\n                array[j + 1] = array[j]; \r\n                 \r\n                // Register the move into the animations  \r\n                result.addSwapAnimation(j, j + 1);\r\n\r\n                j--;\r\n            }\r\n            array[j + 1] = current;\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class SelectionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n\r\n            let minIdx = i;\r\n            for (let j = i + 1; j < array.length; j++) { \r\n                // Add check\r\n                result.addCompareAnimation(minIdx, j);\r\n\r\n                if (array[j] < array[minIdx]) {\r\n                    minIdx = j;\r\n                }\r\n            }\r\n                \r\n            let temp = array[minIdx];\r\n            array[minIdx] = array[i];\r\n            array[i] = temp;\r\n\r\n            // Add movement \r\n            result.addSwapAnimation(minIdx, i);\r\n        } \r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortRecursive {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n         \r\n        MergeSortRecursive.mergeSortRec(array, 0, array.length-1, result);\r\n         \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static mergeSortRec(array, l, r, result) {\r\n        if (l < r) {\r\n            let m = ~~((r - l) / 2 + l);\r\n            MergeSortRecursive.mergeSortRec(array, l, m, result);\r\n            MergeSortRecursive.mergeSortRec(array, m + 1, r, result);\r\n\r\n            MergeSortRecursive.merge(array, l, m, r, result); \r\n            //this.addAnimationsOld(array, result, l, m, r);\r\n        }\r\n    } \r\n    static merge(array, left, middle, right, result) { // In-place merge function\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n         \r\n        if (array[middle] <= array[start2]) \r\n            return; \r\n         \r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n                 \r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n                     \r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n                 \r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n     \r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortIterative {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        MergeSortIterative.mergeSortIter(array, result); \r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static mergeSortIter(array, result) {\r\n        let n = array.length;\r\n        for (let size = 1; size < n; size = 2 * size) {\r\n            for (let left = 0; left < n - 1; left = left + 2 * size) {\r\n                let middle = Math.min(left + size - 1, n - 1);\r\n                let right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                MergeSortIterative.merge(array, left, middle, right, result); \r\n            }\r\n\r\n        }\r\n    }\r\n    static merge(array, left, middle, right, result) {\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n\r\n        if (array[middle] <= array[start2])\r\n            return;\r\n\r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n\r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n\r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n\r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class CocktailSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let left = 0, right = array.length - 1; \r\n\r\n        let sorted = false;\r\n        while (!sorted) {\r\n            sorted = true;\r\n\r\n            for (let i = left; i < right; i++) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i + 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n                     \r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i + 1);\r\n                }\r\n            }\r\n            if (sorted) break;\r\n            right--;\r\n            sorted = true;\r\n\r\n            for (let i = right; i > left; i--) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i - 1);\r\n\r\n                if (array[i] < array[i - 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i - 1];\r\n                    array[i - 1] = temp;\r\n\r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i - 1);\r\n                }\r\n            }\r\n            left++;\r\n        }\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n}","import {SortResult} from './SortResult.js'\r\n\r\nexport class QuickSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        QuickSort.quickSort(array, 0, array.length - 1, result);\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static quickSort(arr, left, right, result) {\r\n        if (left < right) {\r\n            let pivotIndex = QuickSort.partition(arr, left, right, result);\r\n             \r\n            QuickSort.quickSort(arr, left, pivotIndex - 1, result); \r\n            QuickSort.quickSort(arr, pivotIndex, right, result); \r\n        }\r\n    }\r\n    static partition(arr, left, right, result) {\r\n        let pivot = arr[~~((left + right) / 2)];\r\n\r\n        while (left <= right) { \r\n\r\n            while (arr[left] < pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                left++;\r\n            }\r\n\r\n            while (arr[right] > pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                right--;\r\n            }\r\n\r\n            if (left <= right) {\r\n                // Swap\r\n                [arr[left], arr[right]] = [arr[right], arr[left]];\r\n\r\n                // Animation \r\n                result.addSwapAnimation(left, right);\r\n\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n} \r\n// 6 7 9 8 9 ","import {SortResult} from './SortResult.js'\r\n\r\nexport class HeapSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        HeapSort.heapSort(array, result);\r\n\r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static heapSort(arr, result)  {  \r\n        let dim = arr.length;\r\n\r\n        // Filter the array to make a heap\r\n        for (let i = ~~(dim / 2 - 1); i >= 0; i--) \r\n            HeapSort.filter(arr, dim, i, result); \r\n      \r\n        // Extract the elements from the heap \r\n        for (let i=dim-1; i>0; i--) {  \r\n            [arr[0], arr[i]] = [arr[i], arr[0]]; // Extract the max element to the end \r\n             \r\n            result.addSwapAnimation(0, i);\r\n\r\n            HeapSort.filter(arr, i, 0, result); // Filter from the new root\r\n        } \r\n    } \r\n    static filter(arr, size, pos, result) \r\n    { \r\n        let dim = size;\r\n        \r\n        let largest = pos; \r\n        let right = 2*pos + 2; \r\n        let left = 2*pos + 1;\r\n        \r\n        result.addCompareAnimation(right, largest); \r\n        if (right < dim && arr[right] > arr[largest]) \r\n            largest = right; \r\n      \r\n        result.addCompareAnimation(left, largest); \r\n        if (left < dim && arr[left] > arr[largest]) \r\n            largest = left; \r\n       \r\n        // Change and refilter\r\n        if (largest !== pos)  { \r\n            [arr[pos], arr[largest]] = [arr[largest], arr[pos]];\r\n \r\n            result.addSwapAnimation(pos, largest);\r\n\r\n            HeapSort.filter(arr, size, largest, result); \r\n        } \r\n    } \r\n} \r\n// 1 0 3 6 3 7 9","import { SortResult } from './SortResult.js';\r\n\r\nexport class ShellSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n                result.addCompareAnimation(i, i);\r\n \r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > array[j+gap]){\r\n                    [array[j+gap] ,array[j]] = [array[j], array[j+gap]];\r\n                    result.addCompareAnimation(j, j+gap);\r\n                    result.addSwapAnimation(j, j+gap);\r\n                    \r\n                    j -= gap;\r\n                } \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n    static sort_d(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n\r\n                let elem = array[i];\r\n\r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > elem){\r\n                    array[j+gap] = array[j]; \r\n                    j -= gap;\r\n                }\r\n                array[j+gap] = elem; \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nimport './Home.css';\r\n \r\nimport { SortResult } from '../algorithms/SortResult.js'; \r\nimport { BubbleSort } from '../algorithms/BubbleSort.js';\r\nimport { InsertionSort } from '../algorithms/InsertionSort.js';\r\nimport { SelectionSort } from '../algorithms/SelectionSort.js';\r\nimport { MergeSortRecursive } from '../algorithms/MergeSortRecursive.js';\r\nimport { MergeSortIterative } from '../algorithms/MergeSortIterative.js';\r\nimport { CocktailSort } from '../algorithms/CocktailSort.js';\r\nimport { QuickSort } from '../algorithms/QuickSort.js';\r\nimport { HeapSort } from '../algorithms/HeapSort';\r\nimport { ShellSort } from '../algorithms/ShellSort';\r\n\r\n\r\nconst INITIAL_ARRAY_SIZE = 100;\r\nconst MAX_ARRAY_ELEMENT = 300;\r\nconst ALLOWED_DELAYS = [1000, 300, 100, 40, 15, 1];\r\n\r\nconst INITIAL_COLOR = \"darkgray\";\r\nconst SORTED_COLOR = \"green\";\r\nconst COMPARE_COLOR = \"red\";\r\nconst SWAP_COLOR = \"red\";\r\nconst REPLACE_COLOR = \"violet\";\r\n \r\nconst MIN_FREQ = 180;\r\nconst MAX_FREQ = 750;\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            /*resolution: {\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            },*/\r\n            algorithmId: 7, // Used by the algo combo-box\r\n            array: [], // The current array\r\n\r\n            playing: false, // Used by the Plaay/Pause button\r\n            delay: 1, // Used by the speed slider = [1,100]\r\n            soundEnabled: false,\r\n\r\n            update: true // To trigger the render method when not using this.setState(...);\r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps: used by the speedslider when changing the speed\r\n            loopFunction: null, // The function that will be called at each step by the 'loop'\r\n\r\n            currentStep: 0, // To be able to go to the next step\r\n            numberOfSteps: 0, // The totla number of steps\r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n         \r\n        this.config = {\r\n            arraySize : INITIAL_ARRAY_SIZE\r\n        };\r\n\r\n        this.sound = { \r\n            // one audioContext per document\r\n            audioContext : null,\r\n            gainNode : null,\r\n            oscillator : null\r\n        };   \r\n\r\n    } \r\n    componentDidMount() { this.generateNewArray(); } // Generate a new array everytime the user opens up the sorting page\r\n    componentWillUnmount() { this.stopSortAnimation(); } // Stop the animation if the user goes to another page\r\n\r\n    generateNewArray() {\r\n        this.stopSortAnimation();\r\n\r\n        let randomNumber = (a, b) => {\r\n            return Math.floor(Math.random() * (b - a) + a);\r\n        }\r\n\r\n        let arr = [];\r\n        for (let i = 0; i < this.config.arraySize; i++) {\r\n            arr.push(randomNumber(1, MAX_ARRAY_ELEMENT));\r\n        }\r\n        this.setState({ array: arr }); \r\n\r\n        this.paintArray(INITIAL_COLOR);\r\n    }\r\n    \r\n    paintArray(color) {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            let elem = document.getElementById(\"vertical-bar-\" + i);\r\n            elem.style.backgroundColor = color;\r\n        }\r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0) {\r\n            let elem = document.getElementById(\"vertical-bar-\" + index);\r\n            elem.style.backgroundColor = color;\r\n        }\r\n    }\r\n\r\n    initSoundService(){   \r\n        this.deleteSoundService();\r\n\r\n        this.sound.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.sound.gainNode = this.sound.audioContext.createGain()\r\n        this.sound.gainNode.gain.value = 0.15 \r\n        this.sound.gainNode.connect(this.sound.audioContext.destination)\r\n\r\n        this.sound.oscillator = this.sound.audioContext.createOscillator();\r\n        this.sound.oscillator.type = 'sine'; // sine, square, sawtooth, triangle\r\n        this.sound.oscillator.frequency.value = 0; \r\n        this.sound.oscillator.connect(this.sound.gainNode);\r\n        \r\n        this.sound.oscillator.start(this.sound.audioContext.currentTime); \r\n    } \r\n    deleteSoundService(){ \r\n        if(this.sound.oscillator === null)\r\n            return;\r\n        \r\n        this.sound.oscillator.stop(this.sound.audioContext.currentTime); \r\n        this.sound.oscillator = null;\r\n\r\n        this.sound.gainNode.disconnect();\r\n        this.sound.gainNode = null;\r\n        \r\n        this.sound.audioContext.close();\r\n        this.sound.audioContext = null;\r\n    }\r\n    setOscillatorFrequency(val){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = \r\n                val / MAX_ARRAY_ELEMENT * (MAX_FREQ - MIN_FREQ) + MIN_FREQ;\r\n    }\r\n    clearOscillatorFrequency(){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = 0;\r\n    }\r\n\r\n    playAnimations(animations) {\r\n        if (animations.length === 0) {\r\n            this.instantSort();\r\n            return;\r\n        }\r\n        this.animState.currentStep = 0;\r\n        this.animState.numberOfSteps = animations.length;\r\n        this.animState.toUncolor = [];\r\n        this.paintArray(INITIAL_COLOR);\r\n\r\n        // Start the sound oscillator  \r\n        this.initSoundService();\r\n          \r\n        // Start the loop\r\n        this.animState.loopFunction = () => {\r\n            let i = this.animState.currentStep;\r\n\r\n            // End the loop\r\n            if (i >= this.animState.numberOfSteps) {\r\n                this.stopSortAnimation(); \r\n                this.paintArray(SORTED_COLOR);\r\n \r\n                return;\r\n            } \r\n\r\n            // Play the animation\r\n            if (SortResult.isEmptyAnimation(animations[i])) {\r\n                // Uncolor the last colored elements\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n                }\r\n            } else if (SortResult.isCompareAnimation(animations[i]) && ( this.state.delay !== 1 || this.state.playing === false )) { \r\n                // Uncolor the last colored elements\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n                }\r\n\r\n                this.paintArrayIndex(COMPARE_COLOR, animations[i].i);\r\n                this.paintArrayIndex(COMPARE_COLOR, animations[i].j);\r\n\r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(animations[i].i, animations[i].j);\r\n\r\n            } else if (SortResult.isSwapAnimation(animations[i])) {\r\n                // Uncolor the last colored elements\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n                }\r\n\r\n                this.paintArrayIndex(SWAP_COLOR, animations[i].i);\r\n                this.paintArrayIndex(SWAP_COLOR, animations[i].j);\r\n                \r\n                let a = animations[i].i;\r\n                let b = animations[i].j;\r\n\r\n                let temp = this.state.array[a];\r\n                // eslint-disable-next-line\r\n                this.state.array[a] = this.state.array[b];\r\n                // eslint-disable-next-line\r\n                this.state.array[b] = temp;\r\n\r\n                this.setState({ update: true });\r\n \r\n                // Modify the SOUND\r\n                if(this.state.soundEnabled) \r\n                    this.setOscillatorFrequency((this.state.array[a]+this.state.array[b])/2);\r\n                else this.clearOscillatorFrequency();\r\n \r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(animations[i].i, animations[i].j);\r\n\r\n            } else if (SortResult.isReplaceAnimation(animations[i])) {\r\n                // Uncolor the last colored elements\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n                }\r\n\r\n                for (let k = animations[i].i; k <= animations[i].j; k++) {\r\n                    this.paintArrayIndex(REPLACE_COLOR, k);\r\n                    \r\n                    // Store indices to uncolor\r\n                    this.animState.toUncolor.push(k); \r\n\r\n                    // eslint-disable-next-line\r\n                    this.state.array[k] = animations[i].subArrayToReplace[k - animations[i].i];\r\n                }\r\n                this.paintArrayIndex(COMPARE_COLOR, animations[i].i);\r\n                this.paintArrayIndex(COMPARE_COLOR, animations[i].j);\r\n\r\n                this.setState({ update: true });\r\n\r\n            }\r\n\r\n            // Update the current step\r\n            this.animState.currentStep++;\r\n        };\r\n        this.animState.loop = setInterval(this.animState.loopFunction, this.state.delay);\r\n\r\n    }\r\n\r\n    getSortResult(modifyTheOriginal = false) { // returns a SortResult object based on selected algorithm\r\n        let sortResult;\r\n        switch (this.state.algorithmId) {\r\n            case 1:\r\n                sortResult = BubbleSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 2:\r\n                sortResult = InsertionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 3:\r\n                sortResult = SelectionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 4:\r\n                sortResult = MergeSortRecursive.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 5:\r\n                sortResult = MergeSortIterative.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 6:\r\n                sortResult = QuickSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 7:\r\n                sortResult = HeapSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 8:\r\n                sortResult = ShellSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 9:\r\n                sortResult = CocktailSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(sortResult);\r\n\r\n        return sortResult;\r\n    }\r\n    instantSort() { \r\n        console.log(\"Instant sort ...\");\r\n        this.stopSortAnimation();\r\n\r\n        // Sorts the array\r\n        this.getSortResult(true);\r\n        this.setState({ update: true });\r\n\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            let elem = document.getElementById(\"vertical-bar-\" + i);\r\n            elem.style.backgroundColor = SORTED_COLOR;\r\n        }\r\n    }\r\n\r\n    startSortAnimation() {\r\n        if (this.animState.currentStep !== 0)\r\n            return; \r\n\r\n        this.stopSortAnimation();\r\n        this.setState({ playing: true });\r\n\r\n        let sortResult = this.getSortResult();  \r\n        if (typeof sortResult === 'undefined') { \r\n            this.setState({ playing: false });\r\n            return; \r\n        }\r\n\r\n        this.playAnimations(sortResult.animations);\r\n    }\r\n    resumeSortAnimation() {\r\n        // Start the sound oscillator  \r\n        this.initSoundService();\r\n        \r\n        this.setState({ playing: true });\r\n        this.animState.loop = setInterval(this.animState.loopFunction, this.state.delay); \r\n    }\r\n    pauseSortAnimation() {\r\n        clearInterval(this.animState.loop); \r\n\r\n        // Stop the sound oscillator\r\n        this.deleteSoundService(); \r\n\r\n        this.setState({ playing: false });\r\n    }\r\n    stopSortAnimation() {\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0; \r\n        this.paintArray(INITIAL_COLOR);\r\n\r\n        // Stop the sound oscillator\r\n        this.deleteSoundService(); \r\n\r\n        this.setState({ playing: false });\r\n    }\r\n     \r\n    playNext() { this.animState.loopFunction(); }\r\n\r\n    onAlgorithmChange = (event) => {\r\n        let newId = parseInt(event.target.value);\r\n        this.setState({ algorithmId: newId });\r\n    }\r\n    onSpeedChange = (event) => {\r\n        this.pauseSortAnimation();\r\n        let v = parseInt(event.target.value);\r\n        this.setState({ delay: ALLOWED_DELAYS[v - 1] }/*, () => this.startSortAnimation()*/);\r\n    }\r\n    onArraySizeChange = (event) => {\r\n        //this.pauseSortAnimation();\r\n        let v = parseInt(event.target.value);\r\n        this.config.arraySize = v;\r\n        this.setState({ update: true });\r\n    }\r\n    render() { \r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"selectAlgoDropDown\"><h6>Algorithm</h6></label>\r\n                            <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                                onChange={this.onAlgorithmChange} value={this.state.algorithmId}>\r\n                                <option value={1}>Bubble sort</option>\r\n                                <option value={2}>Insertion sort</option>\r\n                                <option value={3}>Selection sort</option>\r\n                                <option value={4}>Merge sort (recursive)</option>\r\n                                <option value={5}>Merge sort (iterative)</option>\r\n                                <option value={6}>Quick sort</option>\r\n                                <option value={7}>Heap sort</option>\r\n                                <option value={8}>Shell sort</option>\r\n                                <option value={-1} disabled> </option>\r\n                                <option value={9}>Cocktail sort</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-header\">\r\n                        <button className=\"btn btn-primary btn-sm\"\r\n                            onClick={() => this.generateNewArray()}>New array</button>\r\n                        <button className=\"btn btn-success btn-sm\"\r\n                            onClick={() => this.instantSort()}>Instant sort</button>\r\n                        \r\n                        <div className=\"range-input form-inline div-right\">\r\n                            <label htmlFor=\"sizeRangeSlider\">Array's size: {this.config.arraySize}</label>\r\n                            <input type=\"range\" className=\"slider\" id=\"sizeRangeSlider\"\r\n                                min=\"10\" max=\"500\" value={this.config.arraySize} \r\n                                onChange={this.onArraySizeChange} />\r\n                        </div> \r\n                    </div>\r\n                     \r\n                    <div className=\"card-body\"> \r\n                        <button\r\n                            onClick={!this.state.playing && this.animState.currentStep === 0\r\n                                ? () => this.startSortAnimation()\r\n                                : (!this.state.playing\r\n                                    ? () => this.resumeSortAnimation()\r\n                                    : () => this.pauseSortAnimation())}\r\n                            className={\"btn btn-sm \" + (!this.state.playing && this.animState.currentStep === 0\r\n                                ? \"btn-success\"\r\n                                : \"btn-warning\")}>\r\n\r\n                            {!this.state.playing && this.animState.currentStep === 0\r\n                                ? \" > Play\"\r\n                                : (!this.state.playing ? \" > Resume\" : \" | | Pause\")}\r\n                        </button>\r\n                        <button onClick={() => this.stopSortAnimation()} className=\"btn btn-danger btn-sm\">Stop</button>\r\n\r\n                        <button onClick={!this.state.playing && this.animState.currentStep !== 0 ? () => this.playNext() : () => null}\r\n                            disabled={this.state.playing || this.animState.currentStep === 0}\r\n                            className=\"btn btn-sm btn-warning\">\r\n                            {\" > Next\"}\r\n                        </button>\r\n\r\n                        <div className=\"range-input form-inline div-right\">\r\n                            <label htmlFor=\"speedRangeSlider\">Speed: {ALLOWED_DELAYS.indexOf(this.state.delay) + 1}x</label>\r\n                            <input type=\"range\" className=\"slider\" id=\"speedRangeSlider\"\r\n                                min=\"1\" max={ALLOWED_DELAYS.length}\r\n                                value={ALLOWED_DELAYS.indexOf(this.state.delay) + 1} \r\n                                onChange={this.onSpeedChange} />\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h6>View</h6>\r\n\r\n                        \r\n                        <div className=\"form-check div-right\">\r\n                            <input type=\"checkbox\" className=\"form-check-input\" id=\"soundCheck\"\r\n                                checked={this.state.soundEnabled}\r\n                                onChange={()=> this.setState({soundEnabled: !this.state.soundEnabled})}/>\r\n                            <label className=\"form-check-label\" htmlFor=\"soundCheck\">Sound</label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-body render-zone\">\r\n                        {\r\n                            this.state.array.map((number, index) =>\r\n                                <div key={index} id={\"vertical-bar-\" + index} style={{\r\n                                    height: number,\r\n                                    marginTop: Math.max(...this.state.array) - number\r\n                                }} className=\"vertical-bar\"></div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './About.css';\r\n \r\nexport class About extends Component{\r\n    static displayName = About.name;\r\n \r\n    render(){\r\n        return ( <div className=\"about\">\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>About</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\"> \r\n                    <p>This is a web application used to visualize different sorting algorithm on a random set of data represented by vertical bars.</p>\r\n                    <p>I made this project to learn front-end web development with javascript+react and to recap/learn different sorting algorithms.</p>\r\n                    <p>It is built with Javascript, React.JS and it's also a <a href=\"https://developers.google.com/web/progressive-web-apps\">progressive web application</a>.</p>\r\n                    <p>You can access a deployed version at <a href=\"https://ciucacosmin109.github.io/SortingVisualizer\">Github pages</a>.</p>\r\n                       \r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>Download a local version</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">   \r\n                    <p>Clone the repository:</p>\r\n                    <code>&gt; git clone https://github.com/ciucacosmin109/SortingVisualizer.git</code><br/>\r\n                    <code>&gt; cd SortingVisualizer</code><br/><br/>\r\n                    \r\n                    <p>Install the dependencies:</p>\r\n                    <code>&gt; npm install</code><br/><br/>\r\n\r\n                    <p>Runs the app in the development mode:</p>\r\n                    <code>&gt; npm start</code><br/><br/>\r\n\r\n                    <p>The default web browser should open automatically and redirect you to <a href=\"http://localhost:3000\">http://localhost:3000</a></p>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>License</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">    \r\n                    <p><a href=\"https://github.com/ciucacosmin109/SortingVisualizer/blob/master/LICENSE\">GPL v3</a></p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport './custom.css'\r\n\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home'; \r\nimport { About } from './components/About';\r\n \r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} /> \r\n                <Route exact path='/index' component={Home} /> \r\n                <Route exact path='/index.html' component={Home} /> \r\n                <Route exact path='/about' component={About} /> \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}