{"version":3,"sources":["components/NavMenu.js","components/Layout.js","utils/SoundPlayer.js","utils/Utils.js","algorithms/factory/SortResult.js","renderers/VerticalBarsRenderer.js","renderers/ColorsRenderer.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSortRecursive.js","algorithms/MergeSortIterative.js","algorithms/CocktailSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","algorithms/ShellSort.js","algorithms/factory/AlgorithmMap.js","algorithms/factory/AlgorithmFactory.js","scenes/Home.js","scenes/About.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","NavItem","tag","Link","isActive","_","location","includes","pathname","activeClassName","className","to","style","display","exact","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","renderItems","Component","displayName","name","Layout","children","SoundPlayer","sound","audioContext","gainNode","oscillator","deleteSoundService","window","AudioContext","webkitAudioContext","createGain","gain","value","connect","destination","createOscillator","type","frequency","start","currentTime","stop","disconnect","close","val","max","Utils","a","b","Math","floor","random","SortResult","sortedArray","animations","anim","push","nrWaitAnims","i","SortWaitAnimation","i_idx","j_idx","SortCompareAnimation","SortSwapAnimation","subArrToReplace","SortReplaceAnimation","animation","j","subArrayToReplace","VerticalBarsRenderer","loopFunction","currentStep","animState","length","onAnimationFinished","paintArray","delay","playing","isCompareAnimation","isWaitAnimation","toUncolor","paintArrayIndex","pop","onWait","onCompare","isSwapAnimation","temp","array","update","onSwap","isReplaceAnimation","k","onReplace","onNextStep","loop","bars","color","backgroundColor","index","setInterval","resume","clearInterval","newArray","size","arr","randomNumber","map","number","key","ref","x","height","marginTop","ColorsRenderer","forceUpdate","hue","COLOR_BAR_HEIGHT","BubbleSort","arrayToSort","modifyTheOriginal","getDescription","result","sorted","addCompareAnimation","addSwapAnimation","href","target","rel","InsertionSort","current","SelectionSort","minIdx","MergeSortRecursive","mergeSortRec","l","r","m","merge","left","middle","right","start1","start2","idx","addReplaceAnimation","slice","MergeSortIterative","mergeSortIter","n","min","CocktailSort","QuickSort","quickSort","pivotIndex","partition","pivot","HeapSort","heapSort","dim","filter","pos","largest","ShellSort","gap","elem","AlgorithmMap","AlgorithmFactory","Object","keys","algoName","ALLOWED_DELAYS","Home","onAlgorithmChange","event","algorithmId","onRendererChange","renderer","stopSortAnimation","newId","parseInt","returnRenderer","rendererId","onSpeedChange","isPlaying","v","pause","onArraySizeChange","arraySize","onSoundCheckChanged","soundEnabled","clearOscillatorFrequency","updateSound","setOscillatorFrequency","onNewArrayClick","sortResult","getAlgorithm","sort","console","log","getSortResult","initSoundService","next","newRandomArray","getCurrentStep","pauseSortAnimation","resumeSortAnimation","startSortAnimation","htmlFor","id","onChange","getAllAlgorithmNames","renderControls","checked","renderView","getComplexity","onPlayClick","playNext","disabled","indexOf","About","App","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f434364.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem } from 'reactstrap';\r\n\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n\r\n    renderItems() {\r\n        return (<>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    isActive={(/*match*/_, location) => [\"/\", \"/index\", \"/index.html\"].includes(location.pathname)} \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/\">\r\n                        <p style={{display: \"inline\"}}>Home</p>\r\n                </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    exact \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/about\">\r\n                        <p style={{display: \"inline\"}}>About</p>\r\n            </NavLink>\r\n            </NavItem>\r\n        </>);\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-black border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Sorting Visualizer</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                {this.renderItems()}\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const MIN_FREQ = 180;\r\nconst MAX_FREQ = 750;\r\n\r\nexport class SoundPlayer {\r\n    constructor(){ \r\n        this.sound = {  \r\n            audioContext : null,\r\n            gainNode : null,\r\n            oscillator : null\r\n        };  \r\n    }\r\n\r\n    initSoundService(){   \r\n        this.deleteSoundService();\r\n\r\n        this.sound.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.sound.gainNode = this.sound.audioContext.createGain()\r\n        this.sound.gainNode.gain.value = 0.15 \r\n        this.sound.gainNode.connect(this.sound.audioContext.destination)\r\n\r\n        this.sound.oscillator = this.sound.audioContext.createOscillator();\r\n        this.sound.oscillator.type = 'sine'; // sine, square, sawtooth, triangle\r\n        this.sound.oscillator.frequency.value = 0; \r\n        this.sound.oscillator.connect(this.sound.gainNode);\r\n        \r\n        this.sound.oscillator.start(this.sound.audioContext.currentTime); \r\n    } \r\n    deleteSoundService(){ \r\n        if(this.sound.oscillator === null)\r\n            return;\r\n        \r\n        this.sound.oscillator.stop(this.sound.audioContext.currentTime); \r\n        this.sound.oscillator = null;\r\n\r\n        this.sound.gainNode.disconnect();\r\n        this.sound.gainNode = null;\r\n        \r\n        this.sound.audioContext.close();\r\n        this.sound.audioContext = null;\r\n    }\r\n\r\n    setOscillatorFrequency(val, max){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = \r\n                val / max * (MAX_FREQ - MIN_FREQ) + MIN_FREQ;\r\n    }\r\n    clearOscillatorFrequency(){\r\n        if(this.sound.oscillator !== null)\r\n            this.sound.oscillator.frequency.value = 0;\r\n    }\r\n}","export class Utils {\r\n    static randomNumber(a, b){\r\n        return Math.floor(Math.random() * (b - a) + a);\r\n    }\r\n}","\r\nexport class SortResult {\r\n    constructor() { \r\n        this.sortedArray = []; \r\n        this.animations = []; \r\n    }\r\n\r\n    addAnimationObject(anim) {\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    addEmptyAnimation(nrWaitAnims) {\r\n        for (let i = 0; i < nrWaitAnims; i++) { \r\n            let anim = new SortWaitAnimation();\r\n            this.animations.push(anim);\r\n        }\r\n    }\r\n    addCompareAnimation(i_idx, j_idx) {\r\n        let anim = new SortCompareAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addSwapAnimation(i_idx, j_idx) {\r\n        let anim = new SortSwapAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addReplaceAnimation(i_idx, j_idx, subArrToReplace) {\r\n        let anim = new SortReplaceAnimation(i_idx, j_idx, subArrToReplace);\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    static isWaitAnimation(animation) { return (animation instanceof SortWaitAnimation); }\r\n    static isCompareAnimation(animation) { return (animation instanceof SortCompareAnimation); }\r\n    static isSwapAnimation(animation) { return ( animation instanceof SortSwapAnimation ); }\r\n    static isReplaceAnimation(animation) { return (animation instanceof SortReplaceAnimation); }\r\n \r\n}\r\n\r\n// Animations\r\nexport class SortCompareAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n}\r\nexport class SortSwapAnimation {\r\n    constructor(i_idx, j_idx/*,newSortedElem*/) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n\r\n        //this.newSortedElements = newSortedElem;\r\n    }\r\n} \r\nexport class SortReplaceAnimation {\r\n    constructor(i_idx, j_idx, subArrToReplace) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n         \r\n        this.subArrayToReplace = subArrToReplace;\r\n    }\r\n}\r\nexport class SortWaitAnimation { } \r\n","import React, { Component } from 'react';\r\nimport { Utils } from '../utils/Utils'\r\nimport { SortResult } from '../algorithms/factory/SortResult.js'; \r\n\r\nimport './VerticalBarsRenderer.css'\r\n\r\nexport const MAX_ARRAY_ELEMENT = 359;\r\n\r\nexport const INITIAL_COLOR = \"darkgray\";\r\nexport const SORTED_COLOR = \"green\";\r\nexport const COMPARE_COLOR = \"red\";\r\nexport const SWAP_COLOR = \"red\";\r\nexport const REPLACE_COLOR = \"violet\";\r\n \r\nexport class VerticalBarsRenderer extends Component{ \r\n    static displayName = VerticalBarsRenderer.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: this.props != null && this.props.array != null \r\n                ? this.props.array \r\n                : [], \r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps (this.loopFunction)\r\n \r\n            playing: false, // To skip animations\r\n            delay: 1, // To skip animations\r\n            \r\n            animations: null, // Animations from SortResult\r\n            currentStep: 0, // To be able to go to the next step \r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n            \r\n        this.bars = []; // Refereces to vertical bars\r\n    }   \r\n\r\n    // Specific methods\r\n    paintArray(color) {   \r\n        for (let i = 0; i < this.state.array.length; i++) \r\n            this.bars[i].style.backgroundColor = color; \r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0)  \r\n            this.bars[index].style.backgroundColor = color; \r\n    }\r\n    loopFunction = () => {\r\n        let currentStep = this.animState.currentStep;\r\n        let animations = this.animState.animations;\r\n \r\n        // End the loop\r\n        if (currentStep >= animations.length) {\r\n            // Event\r\n            if(this.props != null && this.props.onAnimationFinished != null)\r\n                this.props.onAnimationFinished();\r\n            \r\n            this.stop(); \r\n            this.paintArray(SORTED_COLOR); \r\n            \r\n            return;\r\n        } \r\n        \r\n        // Skip useless animations at high speed\r\n        while( this.animState.delay === 1 && \r\n            this.animState.playing === true && \r\n            (SortResult.isCompareAnimation(animations[this.animState.currentStep]) ||\r\n            SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) \r\n        ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        } \r\n        // Skip useless animations while stepping\r\n        while( this.animState.playing === false && SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        }\r\n        \r\n        // Uncolor the last colored elements\r\n        while (this.animState.toUncolor.length > 0) {\r\n            this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n        }\r\n        \r\n        // Play the animation\r\n        if (SortResult.isWaitAnimation(animations[currentStep])) { \r\n            // Event\r\n            if(this.props != null && this.props.onWait != null)\r\n                this.props.onWait();\r\n\r\n        } else if (SortResult.isCompareAnimation(animations[currentStep])) {   \r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onCompare != null)\r\n                this.props.onCompare();\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isSwapAnimation(animations[currentStep])) { \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n            \r\n            this.paintArrayIndex(SWAP_COLOR, a);\r\n            this.paintArrayIndex(SWAP_COLOR, b);\r\n             \r\n            let temp = this.state.array[a];\r\n            // eslint-disable-next-line\r\n            this.state.array[a] = this.state.array[b];\r\n            // eslint-disable-next-line\r\n            this.state.array[b] = temp;\r\n\r\n            this.setState({update: true}); // because i'm not using setState above\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onSwap != null)\r\n                this.props.onSwap(this.state.array[a],this.state.array[b]);\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isReplaceAnimation(animations[currentStep])) { \r\n            for (let k = animations[currentStep].i; k <= animations[currentStep].j; k++) {\r\n                this.paintArrayIndex(REPLACE_COLOR, k);\r\n                \r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(k); \r\n\r\n                // eslint-disable-next-line\r\n                this.state.array[k] = animations[currentStep].subArrayToReplace[k - animations[currentStep].i];\r\n            }\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n             \r\n            // Event\r\n            if(this.props != null && this.props.onReplace != null)\r\n                this.props.onReplace(this.state.array[animations[currentStep].i],this.state.array[animations[currentStep].j]);\r\n  \r\n            this.setState({update: true}); // because i'm not using setState above\r\n\r\n        }\r\n        \r\n        // Event\r\n        if(this.props != null && this.props.onNextStep != null)\r\n            this.props.onNextStep();\r\n  \r\n        // Update the current step\r\n        this.animState.currentStep++;\r\n    }\r\n\r\n    // Mandatory methods 1\r\n    isPlaying(){ \r\n        return this.animState.playing; \r\n    }\r\n    start(animations, delay){ \r\n        if(this.state.array.length === 0)\r\n            return;\r\n\r\n        if (this.animState.currentStep !== 0){\r\n            this.resume(delay);\r\n            return;\r\n        }  \r\n\r\n        this.stop(); \r\n  \r\n        // Init\r\n        this.animState.playing = true;\r\n        this.animState.delay = delay;\r\n        this.animState.animations = animations; \r\n        this.animState.currentStep = 0;  \r\n        this.animState.toUncolor = [];\r\n        this.paintArray(INITIAL_COLOR);\r\n \r\n        // Start the loop \r\n        this.animState.loop = setInterval(this.loopFunction, delay);\r\n\r\n    }\r\n    resume(delay){ \r\n        if(this.state.array.length === 0) \r\n            return; \r\n\r\n        this.animState.playing = true; \r\n        this.animState.delay = delay;\r\n        this.animState.loop = setInterval(this.loopFunction, delay); \r\n    }\r\n    pause(){ \r\n        clearInterval(this.animState.loop); \r\n        this.animState.playing = false;\r\n    }\r\n    stop(){ \r\n        this.animState.playing = false;\r\n\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0; \r\n        this.paintArray(INITIAL_COLOR); \r\n    }\r\n    // Mandatory methods 2\r\n    next() { \r\n        this.loopFunction(); \r\n    }\r\n    getCurrentStep(){ \r\n        return this.animState.currentStep; \r\n    }\r\n    setArray(newArray){\r\n        this.stop();\r\n        this.setState({array: newArray});\r\n    }\r\n    newRandomArray(size){ \r\n        let arr = [];\r\n        for (let i = 0; i < size; i++) {\r\n            arr.push(Utils.randomNumber(1, MAX_ARRAY_ELEMENT));\r\n        }\r\n        this.setState({ array: arr }); \r\n\r\n        return arr;\r\n    }\r\n \r\n    // Render method\r\n    render() {   \r\n        return (  \r\n            <div className=\"vbars-render-zone\">\r\n                {\r\n                    this.state.array.map((number, index) => \r\n                        <div key={index} ref={x=>this.bars[index] = x} style={{\r\n                            height: number,\r\n                            marginTop: Math.max(...this.state.array) - number\r\n                        }} className=\"vertical-bar\"></div>\r\n                    )\r\n                }\r\n            </div> \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Utils } from '../utils/Utils'\r\nimport { SortResult } from '../algorithms/factory/SortResult.js'; \r\n\r\nimport './ColorsRenderer.css'\r\n\r\nexport const INITIAL_COLOR = \"darkgray\"; \r\nexport const COMPARE_COLOR = \"red\";\r\nexport const SWAP_COLOR = \"red\";\r\nexport const REPLACE_COLOR = \"violet\";\r\n\r\nexport const COLOR_BAR_HEIGHT = 359;\r\n\r\n// HSL\r\nexport const SATURATION = 82;\r\nexport const LIGHTNESS =  56;\r\n\r\nexport class ColorsRenderer extends Component{ \r\n    static displayName = ColorsRenderer.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: this.props != null && this.props.array != null \r\n                ? this.props.array \r\n                : [], \r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps (this.loopFunction)\r\n\r\n            playing: false, // To skip animations \r\n            delay: 1, // To skip animations\r\n            \r\n            animations: null, // Animations from SortResult\r\n            currentStep: 0, // To be able to go to the next step  \r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n            \r\n        this.bars = []; // Refereces to vertical bars\r\n    }   \r\n    \r\n    // Specific methods \r\n    paintArray(color) {   \r\n        for (let i = 0; i < this.state.array.length; i++) \r\n            this.bars[i].children[0].style.backgroundColor = color; \r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0)  \r\n            this.bars[index].children[0].style.backgroundColor = color; \r\n    }\r\n    loopFunction = () => {\r\n        let currentStep = this.animState.currentStep;\r\n        let animations = this.animState.animations;\r\n  \r\n        // End the loop\r\n        if (currentStep >= animations.length) {\r\n            // Event\r\n            if(this.props != null && this.props.onAnimationFinished != null)\r\n                this.props.onAnimationFinished();\r\n            \r\n            this.stop();   \r\n            this.paintArray(INITIAL_COLOR); \r\n            return;\r\n        }  \r\n\r\n        // Skip useless animations at high speed\r\n        while( this.animState.delay === 1 && \r\n            this.animState.playing === true && \r\n            (SortResult.isCompareAnimation(animations[this.animState.currentStep]) ||\r\n            SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) \r\n        ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        } \r\n        // Skip useless animations while stepping\r\n        while( this.animState.playing === false && SortResult.isWaitAnimation(animations[this.animState.currentStep]) ) {   \r\n            this.animState.currentStep++; \r\n            currentStep++;\r\n        }\r\n \r\n        // Uncolor the last colored elements\r\n        while (this.animState.toUncolor.length > 0) {\r\n            this.paintArrayIndex(INITIAL_COLOR, this.animState.toUncolor.pop());\r\n        }\r\n \r\n        // Play the animation\r\n        if (SortResult.isWaitAnimation(animations[currentStep])) { \r\n            // Event\r\n            if(this.props != null && this.props.onWait != null)\r\n                this.props.onWait(); \r\n\r\n        } else if (SortResult.isCompareAnimation(animations[currentStep])) {   \r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onCompare != null)\r\n                this.props.onCompare();\r\n\r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(animations[currentStep].i, animations[currentStep].j);\r\n\r\n        } else if (SortResult.isSwapAnimation(animations[currentStep])) {  \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n            \r\n            this.paintArrayIndex(SWAP_COLOR, a);\r\n            this.paintArrayIndex(SWAP_COLOR, b);\r\n\r\n            let temp = this.state.array[a];\r\n            // eslint-disable-next-line\r\n            this.state.array[a] = this.state.array[b];\r\n            // eslint-disable-next-line\r\n            this.state.array[b] = temp;\r\n\r\n            this.forceUpdate(); // because i'm not using setState above\r\n\r\n            // Event\r\n            if(this.props != null && this.props.onSwap != null)\r\n                this.props.onSwap(this.state.array[a],this.state.array[b]);\r\n  \r\n            // Store indices to uncolor\r\n            this.animState.toUncolor.push(a, b);\r\n\r\n        } else if (SortResult.isReplaceAnimation(animations[currentStep])) {  \r\n            let a = animations[currentStep].i;\r\n            let b = animations[currentStep].j;\r\n\r\n            for (let k = a; k <= b; k++) { \r\n                this.paintArrayIndex(REPLACE_COLOR, k);\r\n                \r\n                // Store indices to uncolor\r\n                this.animState.toUncolor.push(k); \r\n\r\n                // eslint-disable-next-line\r\n                this.state.array[k] = animations[currentStep].subArrayToReplace[k - a];\r\n            } \r\n\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].i);\r\n            this.paintArrayIndex(COMPARE_COLOR, animations[currentStep].j);\r\n             \r\n            // Event\r\n            if(this.props != null && this.props.onReplace != null)\r\n                this.props.onReplace(this.state.array[a],this.state.array[b]);\r\n  \r\n            this.forceUpdate(); // because i'm not using setState above \r\n\r\n        }\r\n        \r\n        // Event\r\n        if(this.props != null && this.props.onNextStep != null)\r\n            this.props.onNextStep();\r\n  \r\n        // Update the current step\r\n        this.animState.currentStep++;\r\n    }\r\n\r\n    // Mandatory methods 1\r\n    isPlaying(){ \r\n        return this.animState.playing; \r\n    }\r\n    start(animations, delay){ \r\n        if(this.state.array.length === 0)\r\n            return;\r\n\r\n        if (this.animState.currentStep !== 0){\r\n            this.resume(delay);\r\n            return;\r\n        }  \r\n\r\n        this.stop(); \r\n  \r\n        // Init\r\n        this.animState.playing = true; \r\n        this.animState.delay = delay;\r\n        this.animState.animations = animations; \r\n        this.animState.currentStep = 0;    \r\n \r\n        // Start the loop \r\n        this.animState.loop = setInterval(this.loopFunction, delay);\r\n\r\n    }\r\n    resume(delay){ \r\n        if(this.state.array.length === 0) \r\n            return; \r\n\r\n        this.animState.playing = true;  \r\n        this.animState.delay = delay;\r\n        this.animState.loop = setInterval(this.loopFunction, delay); \r\n    }\r\n    pause(){ \r\n        clearInterval(this.animState.loop); \r\n        this.animState.playing = false;\r\n    }\r\n    stop(){ \r\n        this.animState.playing = false;\r\n\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0;  \r\n    }\r\n\r\n    // Mandatory methods 2\r\n    next() { \r\n        this.loopFunction(); \r\n    }\r\n    getCurrentStep(){ \r\n        return this.animState.currentStep; \r\n    }\r\n    setArray(newArray){\r\n        this.stop();\r\n        this.setState({array: newArray});\r\n    }\r\n    newRandomArray(size){ \r\n        let arr = [];\r\n        for (let i = 0; i < size; i++) {\r\n            arr.push(Utils.randomNumber(0, 359)); // Possible HUE values (HSL)\r\n        }\r\n        this.setState({ array: arr }); \r\n\r\n        return arr;\r\n    }\r\n \r\n    // Render method\r\n    render() {   \r\n        return (  \r\n            <div className=\"colors-render-zone\">\r\n                {\r\n                    this.state.array.map((hue, index) => \r\n                        <div key={index} \r\n                            ref={x=>this.bars[index] = x} \r\n                            className=\"color-bar\"\r\n                            style={{\r\n                                height: COLOR_BAR_HEIGHT + \"px\",\r\n                                backgroundColor: \"hsl(\" + hue + \", \" + SATURATION + \"%, \" + LIGHTNESS + \"%)\"\r\n                            }}\r\n                        >\r\n                            <div className=\"color-bar-indicator\"\r\n                                style={{\r\n                                    marginTop: (COLOR_BAR_HEIGHT - 10) + \"px\",\r\n                                    height: '10px',\r\n                                    backgroundColor: 'darkgrey'\r\n                                }}\r\n                            ></div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div> \r\n        );\r\n    }\r\n}","import React from 'react'; \r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class BubbleSort {\r\n    static displayName = \"Bubble sort\";\r\n\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        this.getDescription();\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let sorted = false; \r\n        for (let k = 0; k < array.length && !sorted; k++) {\r\n            sorted = true;\r\n\r\n            for (let i = 0; i < array.length - k - 1; i++) {\r\n                // Register the check into the animations\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i+1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n\r\n                    // Register the swap into the animations\r\n                    result.addSwapAnimation(i, i + 1); \r\n                }\r\n            }\r\n        } \r\n        \r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n\r\n    static getDescription(){\r\n        return(<div>\r\n            <em><b>Bubble sort</b></em>, sometimes referred to as <b>sinking sort</b>, is a simple \r\n            sorting algorithm that repeatedly steps through the list, compares adjacent elements and \r\n            swaps them if they are in the wrong order. The pass through the list is repeated until \r\n            the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller \r\n            or larger elements \"bubble\" to the top of the list.<br/><br/>\r\n\r\n            This simple algorithm performs <b>poorly</b> in real world use and is used primarily as an educational \r\n            tool. More efficient algorithms such as timsort, or merge sort are used by the sorting \r\n            libraries built into popular programming languages such as Python and Java.<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n^2)\"; \r\n    }\r\n}","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class InsertionSort {\r\n    static displayName = \"Insertion sort\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 1; i < array.length; i++) { \r\n            let current = array[i]; \r\n            // Register the check into the animations\r\n            result.addCompareAnimation(i, i);\r\n\r\n            let j = i - 1;\r\n            while (j >= 0 && current < array[j]) { \r\n                array[j + 1] = array[j]; \r\n                 \r\n                // Register the move into the animations  \r\n                result.addSwapAnimation(j, j + 1);\r\n\r\n                j--;\r\n            }\r\n            array[j + 1] = current;\r\n        }\r\n        \r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n\r\n    static getDescription(){\r\n        return(<div>\r\n            <b>Insertion sort</b> is a simple sorting algorithm that builds the final sorted \r\n            array (or list) one item at a time. It is much less efficient on large lists than \r\n            more advanced algorithms such as quicksort, heapsort, or merge sort. <br/><br/>\r\n\r\n            However, insertion sort provides several advantages: \r\n            <ul>\r\n                <li>Simple implementation: Jon Bentley shows a three-line C version, \r\n                    and a five-line optimized version</li>\r\n                <li>Efficient for (quite) small data sets, much like other quadratic sorting algorithms</li>\r\n                <li>More efficient in practice than most other simple quadratic (i.e., O(n2)) algorithms \r\n                    such as selection sort or bubble sort</li>\r\n                <li>Adaptive, i.e., efficient for data sets that are already substantially sorted: \r\n                    the time complexity is O(kn) when each element in the input is no more than k \r\n                    places away from its sorted position</li>\r\n                <li>Stable; i.e., does not change the relative order of elements with equal keys</li>\r\n                <li>In-place; i.e., only requires a constant amount O(1) of additional memory space</li>\r\n                <li>Online; i.e., can sort a list as it receives it</li>\r\n            </ul><br/>\r\n            \r\n            When people manually sort cards in a bridge hand, most use a method that is similar \r\n            to insertion sort.<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n^2)\"; \r\n    }\r\n}","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class SelectionSort {\r\n    static displayName = \"Selection sort\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n\r\n            let minIdx = i;\r\n            for (let j = i + 1; j < array.length; j++) { \r\n                // Add check\r\n                result.addCompareAnimation(minIdx, j);\r\n\r\n                if (array[j] < array[minIdx]) {\r\n                    minIdx = j;\r\n                }\r\n            }\r\n                \r\n            let temp = array[minIdx];\r\n            array[minIdx] = array[i];\r\n            array[i] = temp;\r\n\r\n            // Add movement \r\n            result.addSwapAnimation(minIdx, i);\r\n        } \r\n        \r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n    static getDescription(){\r\n        return(<div>\r\n            In computer science, <b>selection sort</b> is an in-place comparison sorting algorithm. \r\n            It has an <b>O(n2)</b> time complexity, which makes it inefficient on large lists,\r\n            and generally performs worse than the similar insertion sort. <b>Selection sort</b> is \r\n            noted for its simplicity and has performance advantages over more complicated \r\n            algorithms in certain situations, particularly where auxiliary memory is limited.<br/><br/>\r\n\r\n            The algorithm divides the input list into two parts: a sorted sublist of items which \r\n            is built up from left to right at the front (left) of the list and a sublist of the \r\n            remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist \r\n            is empty and the unsorted sublist is the entire input list. The algorithm proceeds by \r\n            finding the smallest (or largest, depending on sorting order) element in the unsorted \r\n            sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in \r\n            sorted order), and moving the sublist boundaries one element to the right.<br/><br/>\r\n\r\n            The time efficiency of selection sort is quadratic, so there are a number of \r\n            sorting techniques which have better time complexity than selection sort. One \r\n            thing which distinguishes selection sort from other sorting algorithms is that \r\n            it makes the minimum possible number of swaps, n − 1 in the worst case.<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n^2)\"; \r\n    }\r\n}","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class MergeSortRecursive {\r\n    static displayName = \"Merge sort (Recursive)\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n         \r\n        MergeSortRecursive.mergeSortRec(array, 0, array.length-1, result);\r\n         \r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static mergeSortRec(array, l, r, result) {\r\n        if (l < r) {\r\n            let m = ~~((r - l) / 2 + l);\r\n            MergeSortRecursive.mergeSortRec(array, l, m, result);\r\n            MergeSortRecursive.mergeSortRec(array, m + 1, r, result);\r\n\r\n            MergeSortRecursive.merge(array, l, m, r, result);  \r\n        }\r\n    } \r\n    static merge(array, left, middle, right, result) { // In-place merge function\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n         \r\n        if (array[middle] <= array[start2]) \r\n            return; \r\n         \r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n                 \r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n                     \r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n                 \r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n\r\n    static getDescription(){\r\n        return(<div>\r\n            In computer science, <b>merge sort</b> (also commonly spelled mergesort) \r\n            is an efficient, general-purpose, comparison-based sorting algorithm. \r\n            Most implementations produce a stable sort, which means that the \r\n            order of equal elements is the same in the input and output. <br/><br/>\r\n            \r\n            <b>Merge sort</b> is a divide and conquer algorithm that was invented by \r\n            <b> John von Neumann</b> in <b>1945</b>. A detailed description and analysis of \r\n            bottom-up mergesort appeared in a report by Goldstine and \r\n            von Neumann as early as 1948<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n*log(n))\"; \r\n    }\r\n}","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class MergeSortIterative {\r\n    static displayName = \"Merge sort (Iterative)\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        MergeSortIterative.mergeSortIter(array, result); \r\n\r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static mergeSortIter(array, result) {\r\n        let n = array.length;\r\n        for (let size = 1; size < n; size = 2 * size) {\r\n            for (let left = 0; left < n - 1; left = left + 2 * size) {\r\n                let middle = Math.min(left + size - 1, n - 1);\r\n                let right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                MergeSortIterative.merge(array, left, middle, right, result); \r\n            }\r\n\r\n        }\r\n    }\r\n    static merge(array, left, middle, right, result) {\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n\r\n        if (array[middle] <= array[start2])\r\n            return;\r\n\r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n\r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n\r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n\r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n\r\n    static getDescription(){\r\n        return(<div>\r\n            In computer science, <b>merge sort</b> (also commonly spelled mergesort) \r\n            is an efficient, general-purpose, comparison-based sorting algorithm. \r\n            Most implementations produce a stable sort, which means that the \r\n            order of equal elements is the same in the input and output. <br/><br/>\r\n            \r\n            <b>Merge sort</b> is a divide and conquer algorithm that was invented by \r\n            <b> John von Neumann</b> in <b>1945</b>. A detailed description and analysis of \r\n            bottom-up mergesort appeared in a report by Goldstine and \r\n            von Neumann as early as 1948<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n*log(n))\"; \r\n    }\r\n}","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class CocktailSort {\r\n    static displayName = \"Cocktail sort\";\r\n\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let left = 0, right = array.length - 1; \r\n\r\n        let sorted = false;\r\n        while (!sorted) {\r\n            sorted = true;\r\n\r\n            for (let i = left; i < right; i++) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i + 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n                     \r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i + 1);\r\n                }\r\n            }\r\n            if (sorted) break;\r\n            right--;\r\n            sorted = true;\r\n\r\n            for (let i = right; i > left; i--) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i - 1);\r\n\r\n                if (array[i] < array[i - 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i - 1];\r\n                    array[i - 1] = temp;\r\n\r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i - 1);\r\n                }\r\n            }\r\n            left++;\r\n        }\r\n\r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    \r\n    static getDescription(){\r\n        return(<div>\r\n            <b>Cocktail shaker sort</b>, also known as <b>bidirectional bubble sort, cocktail sort, shaker sort</b> \r\n            (which can also refer to a variant of <b>selection sort</b>), <b>ripple sort, shuffle sort, or shuttle \r\n            sort</b>, is an extension of <b>bubble sort</b>. The algorithm extends bubble sort by operating in two \r\n            directions. While it improves on bubble sort by more quickly moving items to the beginning of \r\n            the list, it provides only marginal performance improvements.<br/><br/>\r\n\r\n            Like most variants of bubble sort, cocktail shaker sort is used primarily as an educational tool. \r\n            More performant algorithms such as timsort, or merge sort are used by the sorting libraries built \r\n            into popular programming languages such as Python and Java.<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Cocktail_shaker_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n^2)\"; \r\n    }\r\n}","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class QuickSort {\r\n    static displayName = \"Quick sort\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        QuickSort.quickSort(array, 0, array.length - 1, result);\r\n\r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static quickSort(arr, left, right, result) {\r\n        if (left < right) {\r\n            let pivotIndex = QuickSort.partition(arr, left, right, result);\r\n             \r\n            QuickSort.quickSort(arr, left, pivotIndex - 1, result); \r\n            QuickSort.quickSort(arr, pivotIndex, right, result); \r\n        }\r\n    }\r\n    static partition(arr, left, right, result) {\r\n        let pivot = arr[~~((left + right) / 2)];\r\n\r\n        while (left <= right) { \r\n\r\n            while (arr[left] < pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                left++;\r\n            }\r\n\r\n            while (arr[right] > pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                right--;\r\n            }\r\n\r\n            if (left <= right) {\r\n                // Swap\r\n                [arr[left], arr[right]] = [arr[right], arr[left]];\r\n\r\n                // Animation \r\n                result.addSwapAnimation(left, right);\r\n\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n    \r\n    static getDescription(){\r\n        return(<div>\r\n            <b>Quicksort</b> (sometimes called partition-exchange sort) is an efficient sorting algorithm. \r\n            Developed by British computer scientist <b>Tony Hoare</b> in 1959 and published in 1961, \r\n            it is still a commonly used algorithm for sorting. When implemented well, it can be about \r\n            two or three times faster than its main competitors, merge sort and heapsort.<br/><br/>\r\n\r\n            <b>Quicksort</b> is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from \r\n            the array and partitioning the other elements into two sub-arrays, according to whether \r\n            they are less than or greater than the pivot. The sub-arrays are then sorted recursively. \r\n            This can be done in-place, requiring small additional amounts \r\n            of memory to perform the sorting.<br/><br/>\r\n\r\n            <b>Quicksort</b> is a comparison sort, meaning that it can sort items of any type for which a \r\n            \"less-than\" relation (formally, a total order) is defined. Efficient implementations of \r\n            Quicksort are not a stable sort, meaning that the relative order of equal sort items is \r\n            not preserved.<br/><br/>\r\n\r\n            Mathematical analysis of quicksort shows that, on average, the algorithm takes <b>O(n log n)</b> \r\n            comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this \r\n            behavior is rare.<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n*log(n))\"; \r\n    }\r\n} \r\n// 6 7 9 8 9 ","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class HeapSort {\r\n    static displayName = \"Heap sort\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        HeapSort.heapSort(array, result);\r\n\r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static heapSort(arr, result)  {  \r\n        let dim = arr.length;\r\n\r\n        // Filter the array to make a heap\r\n        for (let i = ~~(dim / 2 - 1); i >= 0; i--) \r\n            HeapSort.filter(arr, dim, i, result); \r\n      \r\n        // Extract the elements from the heap \r\n        for (let i=dim-1; i>0; i--) {  \r\n            [arr[0], arr[i]] = [arr[i], arr[0]]; // Extract the max element to the end \r\n             \r\n            result.addSwapAnimation(0, i);\r\n\r\n            HeapSort.filter(arr, i, 0, result); // Filter from the new root\r\n        } \r\n    } \r\n    static filter(arr, size, pos, result) \r\n    { \r\n        let dim = size;\r\n        \r\n        let largest = pos; \r\n        let right = 2*pos + 2; \r\n        let left = 2*pos + 1;\r\n        \r\n        result.addCompareAnimation(right, largest); \r\n        if (right < dim && arr[right] > arr[largest]) \r\n            largest = right; \r\n      \r\n        result.addCompareAnimation(left, largest); \r\n        if (left < dim && arr[left] > arr[largest]) \r\n            largest = left; \r\n       \r\n        // Change and refilter\r\n        if (largest !== pos)  { \r\n            [arr[pos], arr[largest]] = [arr[largest], arr[pos]];\r\n \r\n            result.addSwapAnimation(pos, largest);\r\n\r\n            HeapSort.filter(arr, size, largest, result); \r\n        } \r\n    } \r\n    \r\n    static getDescription(){\r\n        return(<div>\r\n            In computer science, <b>heapsort</b> is a comparison-based sorting algorithm. Heapsort can be thought of \r\n            as an improved selection sort: like selection sort, heapsort divides its input into a sorted and \r\n            an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest \r\n            element from it and inserting it into the sorted region. Unlike <b>selection sort</b>, heapsort does \r\n            not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains \r\n            the unsorted region in a heap data structure to more quickly find the \r\n            largest element in each step.<br/><br/>\r\n\r\n            Although somewhat slower in practice on most machines than a well-implemented quicksort, it\r\n            has the advantage of a more favorable worst-case <b>O(n log n)</b> runtime. Heapsort is an in-place \r\n            algorithm, but it is not a stable sort.<br/><br/>\r\n\r\n            <b>Heapsort</b> was invented by <b>J. W. J. Williams</b> in <b>1964</b>. This was also the birth of the heap, \r\n            presented already by Williams as a useful data structure in its own right. In the same year, \r\n            <b>R. W. Floyd</b> published an improved version that could sort an array in-place, continuing his \r\n            earlier research into the treesort algorithm.<br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Heapsort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n*log(n))\"; \r\n    }\r\n} \r\n// 1 0 3 6 3 7 9","import React from 'react';\r\nimport { SortResult } from './factory/SortResult.js';\r\n\r\nexport class ShellSort {\r\n    static displayName = \"Shell sort\";\r\n    \r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n                result.addCompareAnimation(i, i);\r\n \r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > array[j+gap]){\r\n                    [array[j+gap] ,array[j]] = [array[j], array[j+gap]];\r\n                    result.addCompareAnimation(j, j+gap);\r\n                    result.addSwapAnimation(j, j+gap);\r\n                    \r\n                    j -= gap;\r\n                } \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        //result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n    static sort_d(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n \r\n        for(let gap = ~~(array.length/2); gap>0; gap= ~~(gap/2)){\r\n\r\n            for(let i = gap; i<array.length; i++){\r\n\r\n                let elem = array[i];\r\n\r\n                let j = i - gap;\r\n                while(j >= 0 && array[j] > elem){\r\n                    array[j+gap] = array[j]; \r\n                    j -= gap;\r\n                }\r\n                array[j+gap] = elem; \r\n                \r\n            }\r\n\r\n        }\r\n        \r\n        result.addReplaceAnimation(0, array.length - 1, array); \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n \r\n    static getDescription(){\r\n        return(<div>\r\n            <b>Shellsort</b> is an optimization of insertion sort that allows \r\n            the exchange of items that are far apart. Shellsort, also known as Shell sort \r\n            or Shell's method, is an in-place comparison sort. It can be seen as either \r\n            a generalization of sorting by exchange (bubble sort) or sorting by \r\n            insertion (insertion sort). <br/><br/>\r\n            \r\n            The method starts by sorting pairs of elements \r\n            far apart from each other, then progressively reducing the gap between elements \r\n            to be compared. By starting with far apart elements, it can move some \r\n            out-of-place elements into position faster than a simple nearest neighbor \r\n            exchange. Donald Shell published the first version of this sort in 1959.\r\n            The running time of Shellsort is heavily dependent on the gap sequence it uses. \r\n            For many practical variants, determining their time complexity remains an open problem. \r\n            <br/><br/>\r\n\r\n            More info on <a href=\"https://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a><br/>\r\n        </div>); \r\n    } \r\n    static getComplexity(){\r\n        return \"O(n*log^2(n)) <-> O(n^2)\"; \r\n    }\r\n}","import { BubbleSort } from '../BubbleSort.js';\r\nimport { InsertionSort } from '../InsertionSort.js';\r\nimport { SelectionSort } from '../SelectionSort.js';\r\nimport { MergeSortRecursive } from '../MergeSortRecursive.js';\r\nimport { MergeSortIterative } from '../MergeSortIterative.js';\r\nimport { CocktailSort } from '../CocktailSort.js';\r\nimport { QuickSort } from '../QuickSort.js';\r\nimport { HeapSort } from '../HeapSort';\r\nimport { ShellSort } from '../ShellSort';\r\n\r\nexport const AlgorithmMap /*: { [key: string]: typeof SortAlgorithm }*/ = { \r\n    [BubbleSort.displayName] : BubbleSort,\r\n    [CocktailSort.displayName] : CocktailSort,\r\n    [HeapSort.displayName] : HeapSort,\r\n    [InsertionSort.displayName] : InsertionSort,\r\n    [MergeSortIterative.displayName] : MergeSortIterative,\r\n    [MergeSortRecursive.displayName] : MergeSortRecursive,\r\n    [QuickSort.displayName] : QuickSort,\r\n    [SelectionSort.displayName] : SelectionSort,\r\n    [ShellSort.displayName] : ShellSort,\r\n};\r\n ","import { AlgorithmMap } from './AlgorithmMap' \r\n\r\nexport class AlgorithmFactory { \r\n    static getAllAlgorithmNames(){\r\n        return Object.keys(AlgorithmMap);\r\n    }\r\n    static getAlgorithm(algoName){\r\n        return AlgorithmMap[algoName]; \r\n    } \r\n}","import React, { Component } from 'react'; \r\nimport './Home.css'; \r\n  \r\nimport { SoundPlayer } from '../utils/SoundPlayer';\r\nimport { VerticalBarsRenderer } from '../renderers/VerticalBarsRenderer';\r\nimport { ColorsRenderer } from '../renderers/ColorsRenderer';\r\nimport { AlgorithmFactory } from '../algorithms/factory/AlgorithmFactory';\r\nimport { QuickSort } from '../algorithms/QuickSort'; \r\n\r\nconst ALLOWED_DELAYS = [1000, 300, 100, 40, 15, 2, 1];\r\n \r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            array: [], // The current array  \r\n \r\n            algorithmId: QuickSort.displayName, // Used by the algo combo-box\r\n            rendererId: 1, // Used by the renderer combo-box\r\n            arraySize : 100, // Used by the array size slider 10-500\r\n\r\n            playing: false, // Used by the Play/Pause/Stop buttons\r\n            delay: 2, // Used by the speed slider = [1,100]\r\n            soundEnabled: true // Used by the checkbox \r\n        };\r\n \r\n        this.renderer = new VerticalBarsRenderer();\r\n        this.sound = new SoundPlayer();\r\n    } \r\n    componentDidMount() { this.onNewArrayClick(); }   \r\n    componentWillUnmount() { this.stopSortAnimation(); }  \r\n    \r\n    getSortResult(modifyTheOriginal = false) { // returns a SortResult object based on selected algorithm\r\n        let sortResult = AlgorithmFactory.getAlgorithm(this.state.algorithmId).sort(this.state.array, modifyTheOriginal); \r\n        console.log(sortResult); \r\n\r\n        return sortResult;\r\n    } \r\n\r\n    // Methods for controling the renderer and the sound player\r\n    startSortAnimation() { \r\n        // Get the animations \r\n        let sortResult = this.getSortResult();  \r\n        if (typeof sortResult === 'undefined') {  \r\n            return; \r\n        } \r\n        if (sortResult.animations.length === 0) { \r\n            this.getSortResult(true);  \r\n            return;\r\n        }\r\n\r\n        this.renderer.start(sortResult.animations, this.state.delay);\r\n        this.setState({playing: true});\r\n\r\n        // Start the sound oscillator  \r\n        this.sound.initSoundService();  \r\n    }\r\n    resumeSortAnimation() {\r\n        this.renderer.resume(this.state.delay);\r\n        this.setState({playing: true});\r\n\r\n        // Start the sound oscillator  \r\n        this.sound.initSoundService(); \r\n    }\r\n    pauseSortAnimation() { \r\n        this.renderer.pause();\r\n        this.setState({playing: false});\r\n\r\n        // Stop the sound oscillator\r\n        this.sound.deleteSoundService();  \r\n    }\r\n    stopSortAnimation() {\r\n        this.renderer.stop();\r\n        this.setState({playing: false});\r\n\r\n        // Stop the sound oscillator\r\n        this.sound.deleteSoundService();  \r\n    } \r\n    playNext() { \r\n        this.renderer.next(); \r\n    }\r\n\r\n    // Control handlers\r\n    onAlgorithmChange = (event) => {\r\n        //let newId = parseInt(event.target.value);\r\n        this.setState({ algorithmId: event.target.value });\r\n    }\r\n    onRendererChange = (event) => {\r\n        if(this.renderer != null)\r\n            this.stopSortAnimation();\r\n\r\n        let newId = parseInt(event.target.value);\r\n        this.renderer = this.returnRenderer(newId);\r\n\r\n        this.setState({ rendererId: newId });\r\n    }\r\n    onSpeedChange = (event) => {\r\n        let resume = this.renderer.isPlaying();\r\n        let v = parseInt(event.target.value);\r\n\r\n        // Pause renderer\r\n        this.renderer.pause(); \r\n        this.setState({playing: false});\r\n         \r\n        this.setState({ delay: ALLOWED_DELAYS[v - 1] }, () => {\r\n            if(resume === true){\r\n                this.renderer.resume(this.state.delay);\r\n                this.setState({playing: true});\r\n            }\r\n        });\r\n    }\r\n    onArraySizeChange = (event) => { \r\n        let v = parseInt(event.target.value);  \r\n        this.setState({ arraySize: v });\r\n    } \r\n    onSoundCheckChanged = (event) => { \r\n        this.setState({ soundEnabled: !this.state.soundEnabled },()=>{\r\n            if(this.state.soundEnabled === false){\r\n                this.sound.clearOscillatorFrequency(); \r\n            }\r\n        });\r\n    }\r\n    updateSound = (a, b) => { \r\n        if(this.state.soundEnabled) \r\n            this.sound.setOscillatorFrequency((a+b)/2, Math.max(...this.state.array));\r\n        else \r\n            this.sound.clearOscillatorFrequency(); \r\n    }\r\n    \r\n    // Button handlers\r\n    onNewArrayClick() {  \r\n        if(this.renderer == null)\r\n            return;\r\n\r\n        let arr = this.renderer.newRandomArray(this.state.arraySize);\r\n        this.setState({array: arr});\r\n    }\r\n    onPlayClick(){ \r\n        if(!this.renderer.isPlaying() && this.renderer.getCurrentStep() === 0)\r\n            this.startSortAnimation();\r\n        else if(!this.renderer.isPlaying())\r\n            this.resumeSortAnimation();\r\n        else \r\n            this.pauseSortAnimation();\r\n    }\r\n\r\n    // Render method\r\n    render() {  \r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"selectAlgoDropDown\"><h6>Algorithm</h6></label>\r\n                            <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                                onChange={this.onAlgorithmChange} value={this.state.algorithmId}>\r\n                                \r\n                                {AlgorithmFactory.getAllAlgorithmNames().map(x=>\r\n                                    <option key={x} value={x}>{x}</option>\r\n                                )} \r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-header\">\r\n                        <button className=\"btn btn-primary btn-sm\"\r\n                            onClick={() => {\r\n                                if(this.renderer != null)\r\n                                    this.stopSortAnimation();\r\n                                this.onNewArrayClick();\r\n                            }}>New array</button>\r\n                            \r\n                        <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                            onChange={this.onRendererChange} value={this.state.rendererId}>\r\n                            <option value={1}>Vertical bars</option>\r\n                            <option value={2}>Colors</option> \r\n                        </select>\r\n\r\n                        <div className=\"range-input form-inline div-right\">\r\n                            <label htmlFor=\"sizeRangeSlider\">Array's size: {this.state.arraySize}</label>\r\n                            <input type=\"range\" className=\"slider\" id=\"sizeRangeSlider\"\r\n                                min=\"10\" max=\"500\" value={this.state.arraySize} \r\n                                onChange={this.onArraySizeChange} />\r\n                        </div> \r\n                    </div>\r\n                    \r\n                    { this.renderer != null ? this.renderControls() : null }\r\n\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h6>View</h6>\r\n \r\n                        <div className=\"form-check div-right\">\r\n                            <input type=\"checkbox\" className=\"form-check-input\" id=\"soundCheck\"\r\n                                checked={this.state.soundEnabled}\r\n                                onChange={this.onSoundCheckChanged}/>\r\n                            <label className=\"form-check-label\" htmlFor=\"soundCheck\">Sound</label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-body render-zone\"> \r\n                        {this.renderView()}\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h6>About {this.state.algorithmId}</h6> \r\n\r\n                        <div className=\"div-right\">\r\n                            <b>Time complexity:</b>{AlgorithmFactory.getAlgorithm(this.state.algorithmId).getComplexity()}\r\n                        </div>\r\n                    </div>\r\n \r\n                    <div className=\"card-body render-zone\"> \r\n                        {AlgorithmFactory.getAlgorithm(this.state.algorithmId).getDescription()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    renderControls(){\r\n        return (\r\n            <div className=\"card-body\"> \r\n                <button\r\n                    onClick={() => this.onPlayClick()}\r\n                    className={\"btn btn-sm \" + (!this.state.playing && this.renderer.getCurrentStep() === 0\r\n                        ? \"btn-success\"\r\n                        : \"btn-warning\")}>\r\n\r\n                    {!this.state.playing && this.renderer.getCurrentStep() === 0\r\n                        ? \" > Play\"\r\n                        : (!this.state.playing ? \" > Resume\" : \" | | Pause\")}\r\n                </button>\r\n                <button onClick={() => this.stopSortAnimation()} className=\"btn btn-danger btn-sm\">Stop</button>\r\n\r\n                <button onClick={!this.state.playing && this.renderer.getCurrentStep() !== 0 ? () => this.playNext() : () => null}\r\n                    disabled={this.state.playing || this.renderer.getCurrentStep() === 0}\r\n                    className=\"btn btn-sm btn-warning\">\r\n                    {\" > Next\"}\r\n                </button>\r\n\r\n                <div className=\"range-input form-inline div-right\">\r\n                    <label htmlFor=\"speedRangeSlider\">Speed: {ALLOWED_DELAYS.indexOf(this.state.delay) + 1}x</label>\r\n                    <input type=\"range\" className=\"slider\" id=\"speedRangeSlider\"\r\n                        min=\"1\" max={ALLOWED_DELAYS.length}\r\n                        value={ALLOWED_DELAYS.indexOf(this.state.delay) + 1} \r\n                        onChange={this.onSpeedChange} />\r\n                </div> \r\n            </div> \r\n        );\r\n    }\r\n    renderView(){\r\n        switch(this.state.rendererId){\r\n            case 1: return ( \r\n                <VerticalBarsRenderer \r\n                    ref={x => this.renderer = x} \r\n                    array={this.state.array} \r\n                    onSwap={(a,b) => this.updateSound(a,b)}\r\n                    onReplace={(a,b) => this.updateSound(a,b)} \r\n                    onCompare={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onWait={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onAnimationFinished={()=> this.stopSortAnimation()}\r\n                />);\r\n            case 2: return (\r\n                <ColorsRenderer \r\n                    ref={x => this.renderer = x} \r\n                    array={this.state.array} \r\n                    onSwap={(a,b) => this.updateSound(a,b)}\r\n                    onReplace={(a,b) => this.updateSound(a,b)} \r\n                    onCompare={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onWait={() => this.state.delay === ALLOWED_DELAYS[0] || this.state.delay === ALLOWED_DELAYS[1] \r\n                        ? this.sound.clearOscillatorFrequency() : null}  \r\n                    onAnimationFinished={()=> this.stopSortAnimation()}\r\n                />\r\n            );\r\n            default: return null; \r\n        }\r\n    }\r\n    returnRenderer(rendererId){\r\n        switch(rendererId){\r\n            case 1: return new VerticalBarsRenderer(); \r\n            case 2: return new ColorsRenderer(); \r\n            default: return null; \r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './About.css';\r\n \r\nexport class About extends Component{\r\n    static displayName = About.name;\r\n \r\n    render(){\r\n        return ( <div className=\"about\">\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>About</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\"> \r\n                    <p>This is a web application used to visualize different sorting algorithm on a random set of data represented by vertical bars.</p>\r\n                    <p>I made this project to learn front-end web development with javascript+react and to recap/learn different sorting algorithms.</p>\r\n                    <p>It is built with Javascript, React.JS and it's also a <a href=\"https://developers.google.com/web/progressive-web-apps\">progressive web application</a>.</p>\r\n                    <p>You can access a deployed version at <a href=\"https://ciucacosmin109.github.io/SortingVisualizer\">Github pages</a>.</p>\r\n                       \r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>Download a local version</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">   \r\n                    <p>Clone the repository:</p>\r\n                    <code>&gt; git clone https://github.com/ciucacosmin109/SortingVisualizer.git</code><br/>\r\n                    <code>&gt; cd SortingVisualizer</code><br/><br/>\r\n                    \r\n                    <p>Install the dependencies:</p>\r\n                    <code>&gt; npm install</code><br/><br/>\r\n\r\n                    <p>Runs the app in the development mode:</p>\r\n                    <code>&gt; npm start</code><br/><br/>\r\n\r\n                    <p>The default web browser should open automatically and redirect you to <a href=\"http://localhost:3000\">http://localhost:3000</a></p>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>License</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">    \r\n                    <p><a href=\"https://github.com/ciucacosmin109/SortingVisualizer/blob/master/LICENSE\">GPL v3</a></p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport './custom.css'\r\n\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './scenes/Home'; \r\nimport { About } from './scenes/About';\r\n \r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} /> \r\n                <Route exact path='/index' component={Home} /> \r\n                <Route exact path='/index.html' component={Home} /> \r\n                <Route exact path='/about' component={About} /> \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}