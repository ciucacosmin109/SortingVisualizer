{"version":3,"sources":["components/NavMenu.js","components/Layout.js","algorithms/SortResult.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSortRecursive.js","algorithms/MergeSortIterative.js","algorithms/CocktailSort.js","algorithms/QuickSort.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","NavItem","tag","Link","isActive","_","location","includes","pathname","activeClassName","className","to","style","display","exact","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","renderItems","Component","displayName","name","Layout","children","SortEmptyAnimation","SortCompareAnimation","i_idx","j_idx","i","j","SortSwapAnimation","SortReplaceAnimation","subArrToReplace","subArrayToReplace","SortResult","sortedArray","animations","anim","push","nrEmptyAnims","animation","BubbleSort","arrayToSort","modifyTheOriginal","array","result","sorted","k","length","addCompareAnimation","temp","addSwapAnimation","InsertionSort","current","SelectionSort","minIdx","MergeSortRecursive","mergeSortRec","addReplaceAnimation","l","r","m","merge","left","middle","right","start1","start2","val","idx","slice","MergeSortIterative","mergeSortIter","n","size","Math","min","CocktailSort","QuickSort","quickSort","arr","pivotIndex","partition","pivot","Home","onAlgorithmChange","event","newId","parseInt","target","value","algorithmId","onSpeedChange","pauseSortAnimation","v","delay","playing","update","animState","loop","loopFunction","currentStep","numberOfSteps","toUncolor","generateNewArray","stopSortAnimation","a","b","floor","random","paintArray","color","document","getElementById","backgroundColor","index","clearInterval","isEmptyAnimation","paintArrayIndex","pop","isCompareAnimation","isSwapAnimation","isReplaceAnimation","setInterval","instantSort","sortResult","sort","console","log","getSortResult","playAnimations","htmlFor","id","onChange","resumeSortAnimation","startSortAnimation","playNext","disabled","type","max","map","number","key","height","marginTop","About","App","path","component","Boolean","window","hostname","match","baseUrl","getElementsByTagName","getAttribute","rootElement","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b69601a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem } from 'reactstrap';\r\n\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n\r\n    renderItems() {\r\n        return (<>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    isActive={(/*match*/_, location) => [\"/\", \"/index\"].includes(location.pathname)} \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/\">\r\n                        <p style={{display: \"inline\"}}>Home</p>\r\n                </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} \r\n                    exact \r\n                    activeClassName=\"active-nav-link\" \r\n                    className=\"nav-link text-dark\" to=\"/about\">\r\n                        <p style={{display: \"inline\"}}>About</p>\r\n            </NavLink>\r\n            </NavItem>\r\n        </>);\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-black border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Sorting Visualizer</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                {this.renderItems()}\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* \r\nsortedArray : []\r\nanimations : [...]\r\n\r\n*/\r\n\r\nexport class SortEmptyAnimation { } \r\nexport class SortCompareAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n}\r\nexport class SortSwapAnimation {\r\n    constructor(i_idx, j_idx) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n    }\r\n} \r\nexport class SortReplaceAnimation {\r\n    constructor(i_idx, j_idx, subArrToReplace) {\r\n        this.i = i_idx;\r\n        this.j = j_idx;\r\n         \r\n        this.subArrayToReplace = subArrToReplace;\r\n    }\r\n}\r\n\r\nexport class SortResult {\r\n    constructor() { \r\n        this.sortedArray = []; \r\n        this.animations = []; \r\n    }\r\n\r\n    addAnimationObject(anim) {\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    addEmptyAnimation(nrEmptyAnims) {\r\n        for (let i = 0; i < nrEmptyAnims; i++) { \r\n            let anim = new SortEmptyAnimation();\r\n            this.animations.push(anim);\r\n        }\r\n    }\r\n    addCompareAnimation(i_idx, j_idx) {\r\n        let anim = new SortCompareAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addSwapAnimation(i_idx, j_idx) {\r\n        let anim = new SortSwapAnimation(i_idx, j_idx);\r\n        this.animations.push(anim);\r\n    }\r\n    addReplaceAnimation(i_idx, j_idx, subArrToReplace) {\r\n        let anim = new SortReplaceAnimation(i_idx, j_idx, subArrToReplace);\r\n        this.animations.push(anim);\r\n    } \r\n\r\n    static isEmptyAnimation(animation) { return (animation instanceof SortEmptyAnimation); }\r\n    static isCompareAnimation(animation) { return (animation instanceof SortCompareAnimation); }\r\n    static isSwapAnimation(animation) { return ( animation instanceof SortSwapAnimation ); }\r\n    static isReplaceAnimation(animation) { return (animation instanceof SortReplaceAnimation); }\r\n\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class BubbleSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let sorted = false; \r\n        for (let k = 0; k < array.length && !sorted; k++) {\r\n            sorted = true;\r\n\r\n            for (let i = 0; i < array.length - k - 1; i++) {\r\n                // Register the check into the animation\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i+1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n\r\n                    // Register the swap into the animation  \r\n                    result.addSwapAnimation(i, i + 1); \r\n                }\r\n            }\r\n        } \r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class InsertionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 1; i < array.length; i++) { \r\n            let current = array[i]; \r\n            // Register the check into the animation\r\n            result.addCompareAnimation(i, i);\r\n\r\n            let j = i - 1;\r\n            while (j >= 0 && current < array[j]) { \r\n                array[j + 1] = array[j]; \r\n                 \r\n                // Register the move into the animation \r\n                result.addCompareAnimation(j, j + 1);\r\n                result.addSwapAnimation(j, j + 1);\r\n\r\n                j--;\r\n            }\r\n            array[j + 1] = current;\r\n        }\r\n        result.sortedArray = array; \r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class SelectionSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n\r\n            let minIdx = i;\r\n            for (let j = i + 1; j < array.length; j++) { \r\n                // Add check\r\n                result.addCompareAnimation(minIdx, j);\r\n\r\n                if (array[j] < array[minIdx]) {\r\n                    minIdx = j;\r\n                }\r\n            }\r\n                \r\n            let temp = array[minIdx];\r\n            array[minIdx] = array[i];\r\n            array[i] = temp;\r\n\r\n            // Add movement \r\n            result.addSwapAnimation(minIdx, i);\r\n        } \r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortRecursive {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n         \r\n        MergeSortRecursive.mergeSortRec(array, 0, array.length-1, result);\r\n         \r\n        result.addReplaceAnimation(0, array.length, array);\r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static mergeSortRec(array, l, r, result) {\r\n        if (l < r) {\r\n            let m = ~~((r - l) / 2 + l);\r\n            MergeSortRecursive.mergeSortRec(array, l, m, result);\r\n            MergeSortRecursive.mergeSortRec(array, m + 1, r, result);\r\n\r\n            MergeSortRecursive.merge(array, l, m, r, result); \r\n            //this.addAnimationsOld(array, result, l, m, r);\r\n        }\r\n    } \r\n    static merge(array, left, middle, right, result) { // In-place merge function\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n         \r\n        if (array[middle] <= array[start2]) \r\n            return; \r\n         \r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n                 \r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n                     \r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n                 \r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n     \r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class MergeSortIterative {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        MergeSortIterative.mergeSortIter(array, result); \r\n\r\n        result.addReplaceAnimation(0, array.length, array);\r\n        result.sortedArray = array;\r\n        return result;\r\n    } \r\n    static mergeSortIter(array, result) {\r\n        let n = array.length;\r\n        for (let size = 1; size < n; size = 2 * size) {\r\n            for (let left = 0; left < n - 1; left = left + 2 * size) {\r\n                let middle = Math.min(left + size - 1, n - 1);\r\n                let right = Math.min(left + 2 * size - 1, n - 1);\r\n\r\n                MergeSortIterative.merge(array, left, middle, right, result); \r\n            }\r\n\r\n        }\r\n    }\r\n    static merge(array, left, middle, right, result) {\r\n        let start1 = left;\r\n        let start2 = middle + 1;\r\n\r\n        if (array[middle] <= array[start2])\r\n            return;\r\n\r\n        while (start1 <= middle && start2 <= right) {\r\n            // Animations\r\n            result.addCompareAnimation(start1, start2); \r\n\r\n            if (array[start1] > array[start2]) {\r\n                let val = array[start2];\r\n                let idx = start2;\r\n\r\n                while (idx !== start1) {\r\n                    array[idx] = array[idx - 1];\r\n\r\n                    idx--;\r\n                }\r\n                array[idx] = val;\r\n\r\n                // Animations \r\n                result.addReplaceAnimation(start1, start2, array.slice(start1, start2 + 1));\r\n\r\n                start1++;\r\n                middle++;\r\n                start2++;\r\n            } else start1++;\r\n        }\r\n    } \r\n\r\n}","import { SortResult } from './SortResult.js';\r\n\r\nexport class CocktailSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        let left = 0, right = array.length - 1; \r\n\r\n        let sorted = false;\r\n        while (!sorted) {\r\n            sorted = true;\r\n\r\n            for (let i = left; i < right; i++) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i + 1);\r\n\r\n                if (array[i] > array[i + 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i + 1];\r\n                    array[i + 1] = temp;\r\n                     \r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i + 1);\r\n                }\r\n            }\r\n            if (sorted) break;\r\n            right--;\r\n            sorted = true;\r\n\r\n            for (let i = right; i > left; i--) {\r\n                // Compare Animation\r\n                result.addCompareAnimation(i, i - 1);\r\n\r\n                if (array[i] < array[i - 1]) {\r\n                    sorted = false;\r\n\r\n                    // Swap the values\r\n                    let temp = array[i];\r\n                    array[i] = array[i - 1];\r\n                    array[i - 1] = temp;\r\n\r\n                    // Swap animation \r\n                    result.addSwapAnimation(i, i - 1);\r\n                }\r\n            }\r\n            left++;\r\n        }\r\n\r\n\r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n}","import {SortResult} from './SortResult.js'\r\n\r\nexport class QuickSort {\r\n    static sort(arrayToSort, modifyTheOriginal) {\r\n        let array = modifyTheOriginal ? arrayToSort : [...arrayToSort];\r\n        let result = new SortResult();\r\n\r\n        QuickSort.quickSort(array, 0, array.length - 1, result);\r\n\r\n        result.addReplaceAnimation(0, array.length, array);\r\n        result.sortedArray = array;\r\n        return result;\r\n    }\r\n    static quickSort(arr, left, right, result) {\r\n        if (left < right) {\r\n            let pivotIndex = QuickSort.partition(arr, left, right, result);\r\n             \r\n            QuickSort.quickSort(arr, left, pivotIndex - 1, result); \r\n            QuickSort.quickSort(arr, pivotIndex, right, result); \r\n        }\r\n    }\r\n    static partition(arr, left, right, result) {\r\n        let pivot = arr[~~((left + right) / 2)];\r\n\r\n        while (left <= right) { \r\n\r\n            while (arr[left] < pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                left++;\r\n            }\r\n\r\n            while (arr[right] > pivot) {\r\n                // Animation\r\n                result.addCompareAnimation(left, right);\r\n                right--;\r\n            }\r\n\r\n            if (left <= right) {\r\n                // Swap\r\n                [arr[left], arr[right]] = [arr[right], arr[left]];\r\n\r\n                // Animation\r\n                result.addSwapAnimation(left, right);\r\n\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n} \r\n// 6 7 9 8 9 ","import React, { Component } from 'react';\r\n\r\nimport { SortResult } from '../algorithms/SortResult.js'; \r\nimport { BubbleSort } from '../algorithms/BubbleSort.js';\r\nimport { InsertionSort } from '../algorithms/InsertionSort.js';\r\nimport { SelectionSort } from '../algorithms/SelectionSort.js';\r\nimport { MergeSortRecursive } from '../algorithms/MergeSortRecursive.js';\r\nimport { MergeSortIterative } from '../algorithms/MergeSortIterative.js';\r\nimport { CocktailSort } from '../algorithms/CocktailSort.js';\r\nimport { QuickSort } from '../algorithms/QuickSort.js';\r\n\r\nimport './Home.css';\r\n \r\nconst arraySize = 100;\r\nconst maxArrayElement = 300;\r\n\r\nconst initialColor = \"darkgray\";\r\nconst sortedColor = \"green\";\r\nconst checkColor = \"red\";\r\nconst replaceColor = \"violet\";\r\n\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            /*resolution: {\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            },*/\r\n            algorithmId: 7, // Used by the algo combo-box\r\n            array: [], // The current array\r\n\r\n            playing: false, // Used by the Plaay/Pause button\r\n            delay: 1, // Used by the speed slider = [1,100]\r\n\r\n            update: true // To trigger the render method when not using this.setState(...);\r\n        };\r\n\r\n        this.animState = {\r\n            loop: null, // The timer for the steps: used by the speedslider when changing the speed\r\n            loopFunction: null, // The function that will be called at each step by the 'loop'\r\n            currentStep: 0, // To be able to go to the next step\r\n            numberOfSteps: 0, // The totla number of steps\r\n\r\n            toUncolor: [] // The elements that need to be uncolored\r\n        };\r\n         \r\n    }\r\n    componentDidMount() { this.generateNewArray(); } // Generate a new array everytime the user opens up the sorting page\r\n    componentWillUnmount() { this.stopSortAnimation(); } // Stop the animation if the user goes to another page\r\n\r\n    generateNewArray() {\r\n        this.stopSortAnimation();\r\n\r\n        let randomNumber = (a, b) => {\r\n            return Math.floor(Math.random() * (b - a) + a);\r\n        }\r\n\r\n        let arr = [];\r\n        for (let i = 0; i < arraySize; i++) {\r\n            arr.push(randomNumber(1, maxArrayElement));\r\n        }\r\n        this.setState({ array: arr }); \r\n\r\n        this.paintArray(initialColor);\r\n    }\r\n    \r\n    paintArray(color) {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            let elem = document.getElementById(\"vertical-bar-\" + i);\r\n            elem.style.backgroundColor = color;\r\n        }\r\n    }\r\n    paintArrayIndex(color, index) {\r\n        if (index < this.state.array.length && index >= 0) {\r\n            let elem = document.getElementById(\"vertical-bar-\" + index);\r\n            elem.style.backgroundColor = color;\r\n        }\r\n    }\r\n\r\n    playAnimations(animations) {\r\n        if (animations.length === 0) {\r\n            this.instantSort();\r\n            return;\r\n        }\r\n        this.animState.currentStep = 0;\r\n        this.animState.numberOfSteps = animations.length;\r\n        this.animState.toUncolor = [];\r\n        this.paintArray(initialColor)\r\n\r\n        this.animState.loopFunction = () => {\r\n            let i = this.animState.currentStep;\r\n\r\n            // End the loop\r\n            if (i >= this.animState.numberOfSteps - 1) {\r\n                clearInterval(this.animState.loop);\r\n                this.paintArray(sortedColor);\r\n\r\n                this.animState.currentStep = 0;\r\n                this.setState({ playing: false });\r\n                return;\r\n            }\r\n\r\n            // Play the animation\r\n            if (SortResult.isEmptyAnimation(animations[i])) {\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(initialColor, this.animState.toUncolor.pop());\r\n                }\r\n            } else if (SortResult.isCompareAnimation(animations[i])) {\r\n                //this.paintArray(\"darkgray\");\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(initialColor, this.animState.toUncolor.pop());\r\n                }\r\n\r\n                this.paintArrayIndex(checkColor, animations[i].i);\r\n                this.paintArrayIndex(checkColor, animations[i].j);\r\n\r\n                this.animState.toUncolor.push(animations[i].i, animations[i].j);\r\n\r\n            } else if (SortResult.isSwapAnimation(animations[i])) {\r\n                let a = animations[i].i;\r\n                let b = animations[i].j;\r\n\r\n                let temp = this.state.array[a];\r\n                // eslint-disable-next-line\r\n                this.state.array[a] = this.state.array[b];\r\n                // eslint-disable-next-line\r\n                this.state.array[b] = temp;\r\n\r\n                this.setState({ update: true });\r\n\r\n            } else if (SortResult.isReplaceAnimation(animations[i])) {\r\n                // Uncolor the last colored elements\r\n                while (this.animState.toUncolor.length > 0) {\r\n                    this.paintArrayIndex(initialColor, this.animState.toUncolor.pop());\r\n                }\r\n\r\n                for (let k = animations[i].i; k <= animations[i].j; k++) {\r\n                    this.paintArrayIndex(replaceColor, k);\r\n                    this.animState.toUncolor.push(k); // These will be uncolored at the next step\r\n\r\n                    // eslint-disable-next-line\r\n                    this.state.array[k] = animations[i].subArrayToReplace[k - animations[i].i];\r\n                }\r\n                this.setState({ update: true });\r\n\r\n            }\r\n\r\n            // Update the current step\r\n            this.animState.currentStep++;\r\n        };\r\n        this.animState.loop = setInterval(this.animState.loopFunction, this.state.delay);\r\n\r\n    }\r\n\r\n    getSortResult(modifyTheOriginal = false) { // returns a SortResult object based on selected algorithm\r\n        let sortResult;\r\n        switch (this.state.algorithmId) {\r\n            case 1:\r\n                sortResult = BubbleSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 2:\r\n                sortResult = InsertionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 3:\r\n                sortResult = SelectionSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 4:\r\n                sortResult = MergeSortRecursive.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 5:\r\n                sortResult = MergeSortIterative.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 6:\r\n                sortResult = CocktailSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            case 7:\r\n                sortResult = QuickSort.sort(this.state.array, modifyTheOriginal);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(sortResult);\r\n\r\n        return sortResult;\r\n    }\r\n    instantSort() { \r\n        console.log(\"Instant sort ...\");\r\n        this.stopSortAnimation();\r\n\r\n        // Sorts the array\r\n        this.getSortResult(true);\r\n        this.setState({ update: true });\r\n\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            let elem = document.getElementById(\"vertical-bar-\" + i);\r\n            elem.style.backgroundColor = sortedColor;\r\n        }\r\n    }\r\n\r\n    startSortAnimation() {\r\n        if (this.animState.currentStep !== 0)\r\n            return; \r\n\r\n        this.stopSortAnimation();\r\n        this.setState({ playing: true });\r\n\r\n        let sortResult = this.getSortResult();  \r\n        if (typeof sortResult === 'undefined') { \r\n            this.setState({ playing: false });\r\n            return; \r\n        }\r\n\r\n        this.playAnimations(sortResult.animations);\r\n    }\r\n    resumeSortAnimation() {\r\n        this.setState({ playing: true });\r\n        this.animState.loop = setInterval(this.animState.loopFunction, this.state.delay); \r\n    }\r\n    pauseSortAnimation() {\r\n        clearInterval(this.animState.loop); \r\n        this.setState({ playing: false });\r\n    }\r\n    stopSortAnimation() {\r\n        clearInterval(this.animState.loop);\r\n        this.animState.currentStep = 0; \r\n        this.paintArray(initialColor);\r\n\r\n        this.setState({ playing: false });\r\n    }\r\n     \r\n    playNext() { this.animState.loopFunction(); }\r\n\r\n    onAlgorithmChange = (event) => {\r\n        let newId = parseInt(event.target.value);\r\n        this.setState({ algorithmId: newId });\r\n    }\r\n    onSpeedChange = (event) => {\r\n        this.pauseSortAnimation();\r\n        let v = parseInt(event.target.value);\r\n        this.setState({ delay: 100 - v + 1 }/*, () => this.startSortAnimation()*/);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <div className=\"form-inline\">\r\n                            <label htmlFor=\"selectAlgoDropDown\">Algorithm</label>\r\n                            <select className=\"btn btn-sm combo-box\" id=\"selectAlgoDropDown\"\r\n                                onChange={this.onAlgorithmChange} value={this.state.algorithmId}>\r\n                                <option value={1}>Bubble sort</option>\r\n                                <option value={2}>Insertion sort</option>\r\n                                <option value={3}>Selection sort</option>\r\n                                <option value={4}>Merge sort (recursive)</option>\r\n                                <option value={5}>Merge sort (iterative)</option>\r\n                                <option value={6}>Cocktail sort</option>\r\n                                <option value={7}>Quick sort</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"card-header\">\r\n                        <button className=\"btn btn-primary btn-sm\"\r\n                            onClick={() => this.generateNewArray()}>New array</button>\r\n                        <button className=\"btn btn-success btn-sm\"\r\n                            onClick={() => this.instantSort()}>Instant sort</button>\r\n                    </div>\r\n                     \r\n                    <div className=\"card-body\"> \r\n                        <button\r\n                            onClick={!this.state.playing && this.animState.currentStep === 0\r\n                                ? () => this.startSortAnimation()\r\n                                : (!this.state.playing\r\n                                    ? () => this.resumeSortAnimation()\r\n                                    : () => this.pauseSortAnimation())}\r\n                            className={\"btn btn-sm \" + (!this.state.playing && this.animState.currentStep === 0\r\n                                ? \"btn-success\"\r\n                                : \"btn-warning\")}>\r\n\r\n                            {!this.state.playing && this.animState.currentStep === 0\r\n                                ? \" > Play\"\r\n                                : (!this.state.playing ? \" > Resume\" : \" | | Pause\")}\r\n                        </button>\r\n                        <button onClick={() => this.stopSortAnimation()} className=\"btn btn-danger btn-sm\">Stop</button>\r\n\r\n                        <button onClick={!this.state.playing && this.animState.currentStep !== 0 ? () => this.playNext() : () => null}\r\n                            disabled={this.state.playing || this.animState.currentStep === 0}\r\n                            className=\"btn btn-sm btn-warning\">\r\n                            {\" > Next\"}\r\n                        </button>\r\n\r\n                        <div className=\"speed-range-input form-inline\">\r\n                            <label htmlFor=\"speedRangeSlider\">Speed</label>\r\n                            <input type=\"range\" min=\"1\" max=\"100\" className=\"slider\" id=\"speedRangeSlider\"\r\n                                value={100 - this.state.delay + 1} onChange={this.onSpeedChange} />\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h6>View</h6>\r\n                    </div>\r\n\r\n                    <div className=\"card-body render-zone\">\r\n                        {\r\n                            this.state.array.map((number, index) =>\r\n                                <div key={index} id={\"vertical-bar-\" + index} style={{\r\n                                    height: number,\r\n                                    marginTop: Math.max(...this.state.array) - number\r\n                                }} className=\"vertical-bar\"></div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class About extends Component{\r\n    static displayName = About.name;\r\n \r\n    render(){\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <h6>About</h6>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                    <p>\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, \r\n                        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \r\n                        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \r\n                        nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \r\n                        reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \r\n                        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt \r\n                        mollit anim id est laborum.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport './custom.css'\r\n\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home'; \r\nimport { About } from './components/About';\r\n \r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} /> \r\n                <Route exact path='/index' component={Home} /> \r\n                <Route exact path='/about' component={About} /> \r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}